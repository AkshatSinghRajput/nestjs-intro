var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.036,1,2.164]],["body/controllers/AppController.html",[0,1.917,1,3.918,2,1.057,3,0.274,4,0.238,5,0.238,6,2.825,7,0.771,8,3.349,9,3.217,10,2.653,11,4.484,12,3.827,13,3.8,14,3.625,15,1.432,16,4.651,17,3.393,18,3.637,19,2.992,20,3.349,21,3.349,22,4.552,23,4.552,24,2.267,25,4.552,26,0.522,27,1.931,28,4.651,29,0.982,30,0.029,31,0.672,32,3.361,33,2.528,34,3.349,35,4.651,36,2.539,37,3.827,38,4.552,39,4.552,40,3.827,41,1.432,42,3.827,43,3.827,44,1.301,45,0.371,46,0.727,47,3.137,48,2.825,49,0.274,50,0.014,51,1.542,52,1.673,53,1.673,54,1.673,55,1.542,56,1.789,57,2.209,58,1.542,59,1.321,60,3.361,61,0.019,62,0.019]],["title/modules/AppModule.html",[63,1.036,64,2.164]],["body/modules/AppModule.html",[1,3.241,2,1.348,3,0.251,4,0.218,5,0.218,7,0.726,8,2.264,9,3.11,11,3.153,19,2.817,20,3.153,21,3.153,24,2.134,30,0.029,45,0.514,46,0.666,47,3.149,48,2.588,49,0.251,50,0.013,61,0.018,62,0.018,63,1.94,64,4.308,65,2.091,66,1.412,67,1.67,68,1.67,69,1.412,70,2.675,71,1.67,72,2.588,73,2.588,74,2.588,75,3.149,76,3.451,77,3.451,78,3.451,79,2.89,80,2.325,81,1.67,82,1.533,83,3.078,84,4.286,85,4.286,86,4.286,87,2.893,88,2.893,89,4.286,90,1.684,91,1.818,92,2.261,93,2.134,94,3.153,95,2.817,96,3.153,97,3.153,98,4.286,99,4.286,100,3.078,101,3.078,102,3.078,103,3.078,104,1.83,105,1.306,106,1.163,107,3.078,108,3.078,109,3.078,110,1.533,111,1.412,112,3.078,113,2.588,114,3.078,115,3.078,116,0.615,117,4.286,118,1.67,119,3.078,120,2.325,121,3.078,122,3.078,123,3.078,124,2.588,125,1.67,126,3.078,127,3.078,128,3.078,129,2.588]],["title/injectables/AppService.html",[47,1.787,130,1.2]],["body/injectables/AppService.html",[3,0.285,4,0.247,5,0.247,7,0.792,8,3.441,9,3.066,11,3.441,12,3.932,15,1.897,16,4.927,19,3.696,24,2.8,26,0.543,27,1.984,28,4.728,30,0.029,31,0.699,33,2.558,34,4.437,35,4.728,36,2.767,37,3.932,40,3.932,41,1.471,42,4.429,43,4.429,44,1.327,45,0.285,46,0.757,47,3.051,49,0.285,50,0.014,55,2.871,56,1.375,59,1.375,61,0.02,62,0.02,95,3.463,130,1.705,131,1.898,132,2.941,133,3.074,134,3.344,135,4.677,136,4.677,137,4.677,138,2.07,139,4.677,140,4.677,141,3.499,142,2.537,143,4.677,144,2.781,145,4.677,146,4.677,147,3.932,148,3.074,149,4.677]],["title/controllers/AuthController.html",[0,1.036,150,2.164]],["body/controllers/AuthController.html",[0,1.982,2,1.209,3,0.313,4,0.272,5,0.272,7,0.843,10,2.531,13,3.626,14,3.281,15,1.565,17,3.27,30,0.029,45,0.449,46,0.831,49,0.313,50,0.016,51,1.764,52,1.914,53,1.914,54,1.914,55,1.764,56,1.51,57,2.526,58,1.764,61,0.021,62,0.021,93,3.283,106,1.584,133,3.27,134,2.959,138,1.955,150,3.972,151,3.231,152,2.286,153,3.843,154,2.531,155,4.975,156,3.66,157,4.182,158,2.477,159,2.959,160,2.959,161,3.137,162,4.975,163,3.231,164,3.27,165,1.63,166,3.843,167,3.843,168,2.286,169,2.827,170,2.827,171,1.914]],["title/modules/AuthModule.html",[63,1.036,75,1.787]],["body/modules/AuthModule.html",[2,1.512,3,0.297,4,0.258,5,0.258,7,0.814,10,2.206,15,1.512,24,1.816,30,0.029,45,0.484,46,0.789,49,0.392,50,0.015,61,0.02,62,0.02,63,2.029,65,2.04,66,1.674,67,1.979,68,1.979,69,1.674,70,2.918,71,2.918,75,3.426,79,2.678,80,2.609,81,1.979,82,1.816,88,1.979,90,1.889,91,2.04,93,3.181,106,1.657,150,3.535,156,3.537,157,4.042,159,2.859,160,2.859,161,3.276,163,3.067,172,3.067,173,3.067,174,3.067,175,3.648,176,4.372,177,3.16,178,4.042,179,4.042,180,4.042,181,4.809,182,3.535,183,3.648,184,3.067,185,2.684,186,3.537]],["title/injectables/AuthService.html",[130,1.2,161,1.64]],["body/injectables/AuthService.html",[3,0.191,4,0.166,5,0.166,7,0.796,10,1.617,15,1.33,18,1.544,24,1.169,26,0.364,27,1.495,30,0.029,31,0.845,33,2.563,36,1.617,41,1.478,44,1.554,45,0.287,46,0.508,49,0.191,50,0.01,51,1.617,52,1.754,53,2.34,54,1.754,55,2.516,56,1.662,58,1.078,59,1.385,61,0.015,62,0.015,90,1.385,91,1.495,93,3.16,97,1.728,106,1.772,116,0.704,120,1.912,124,4.445,125,3.06,130,1.285,131,1.274,134,2.794,138,1.846,142,2.55,144,1.397,148,3.089,156,3.704,158,2.34,159,2.794,160,2.095,161,2.808,168,1.397,176,3.704,178,2.962,179,4.445,182,2.316,187,1.974,188,2.34,189,4.699,190,1.754,191,2.831,192,3.524,193,2.34,194,2.633,195,4.699,196,2.095,197,1.974,198,2.348,199,1.617,200,1.385,201,1.478,202,2.348,203,4.699,204,4.445,205,2.962,206,4.699,207,3.524,208,3.524,209,3.524,210,3.524,211,2.507,212,4.699,213,3.524,214,3.524,215,3.524,216,3.457,217,2.348,218,3.524,219,3.089,220,2.095,221,1.617,222,3.524,223,3.524,224,1.385,225,4.699,226,3.524,227,3.524,228,2.316,229,4.229,230,2.779,231,2.348,232,1.542,233,2.962,234,1.544,235,1.974,236,1.974,237,1.974,238,1.974,239,1.397,240,1.728,241,1.974,242,1.974,243,1.974,244,1.974]],["title/classes/CreatePostDto.html",[50,0.014,245,1.787]],["body/classes/CreatePostDto.html",[3,0.178,4,0.155,5,0.155,7,1.031,26,0.34,29,1.686,30,0.029,31,1.153,36,1.532,41,1.974,44,1.547,45,0.419,49,0.178,50,0.017,61,0.014,62,0.014,87,1.187,110,2.017,116,1.254,120,2.649,158,2.017,165,0.928,188,1.663,201,1.871,245,1.812,246,1.004,247,4.932,248,1.61,249,1.371,250,3.382,251,3.405,252,2.662,253,2.662,254,3.405,255,2.662,256,2.649,257,3.591,258,3.518,259,4.326,260,2.413,261,2.188,262,2.188,263,2.808,264,2.808,265,5.519,266,2.188,267,2.188,268,2.792,269,2.195,270,2.808,271,3.34,272,2.188,273,2.188,274,2.188,275,3.591,276,3.34,277,3.81,278,5.146,279,2.195,280,2.808,281,2.188,282,2.188,283,2.979,284,3.405,285,3.34,286,3.34,287,2.188,288,2.188,289,3.34,290,2.979,291,1.859,292,2.457,293,3.34,294,2.808,295,2.188,296,2.188,297,2.188,298,2.188,299,1.61,300,3.81,301,2.188,302,3.81,303,3.81,304,3.34,305,2.808,306,3.34,307,3.34,308,3.34,309,2.188,310,3.591,311,2.808,312,2.808,313,2.808,314,2.188,315,2.188,316,1.812,317,3.34,318,2.188,319,2.188,320,4.533,321,2.188,322,2.188,323,2.188,324,2.188,325,3.209,326,4.499,327,3.34,328,2.188,329,3.34,330,2.457,331,2.903,332,3.518,333,3.209,334,2.808,335,1.61,336,1.61,337,2.188,338,1.61,339,3.34,340,1.089,341,1.61,342,2.808,343,1.839,344,1.839,345,0.86,346,1.61,347,1.61,348,4.051,349,2.188,350,2.808,351,1.839,352,2.188,353,1.839,354,1.839,355,2.188,356,2.188,357,2.188,358,2.188,359,2.188,360,1.839,361,2.188,362,1.839,363,1.61,364,2.457,365,2.188]],["title/classes/CreatePostMetaOptionDto.html",[50,0.014,268,1.787]],["body/classes/CreatePostMetaOptionDto.html",[3,0.359,4,0.312,5,0.312,7,0.747,26,0.684,29,1.289,30,0.028,31,0.881,41,1.707,44,1.481,45,0.442,49,0.359,50,0.022,61,0.023,62,0.023,110,3.054,116,1.175,165,1.871,246,2.024,249,1.837,260,2.132,268,2.944,290,3.567,299,3.245,325,3.567,330,3.992,331,3.227,333,2.899,340,2.196,345,2.132,346,3.992,364,4.325,366,3.708,367,3.647,368,4.562,369,3.992,370,4.411,371,4.411]],["title/classes/CreateTagDto.html",[50,0.014,372,2.423]],["body/classes/CreateTagDto.html",[3,0.246,4,0.213,5,0.213,7,1.054,26,0.469,29,1.627,30,0.028,31,1.112,36,1.941,41,1.957,44,1.666,45,0.344,49,0.246,50,0.017,61,0.018,62,0.018,92,1.794,116,1.317,154,1.941,165,1.281,200,2.187,201,1.901,211,2.43,246,1.386,249,1.79,255,3.659,256,3.214,259,4.103,263,3.556,264,3.556,290,2.78,291,1.941,299,3.112,300,3.556,302,4.445,303,4.445,305,3.556,325,3.208,326,4.445,330,3.112,331,2.515,332,3.476,333,3.659,334,3.556,335,2.223,336,2.223,338,2.223,340,1.504,353,3.556,354,2.54,360,2.54,363,2.223,369,3.112,372,3.112,373,4.85,374,2.54,375,4.103,376,3.7,377,5.769,378,4.23,379,3.792,380,3.021,381,3.021,382,4.23,383,3.021,384,3.021,385,3.021,386,3.021,387,3.021,388,3.021,389,1.794,390,3.021,391,3.556,392,3.556,393,4.23,394,3.021,395,3.021,396,3.021]],["title/classes/CreateUserDto.html",[50,0.014,397,1.787]],["body/classes/CreateUserDto.html",[3,0.196,4,0.17,5,0.17,7,0.607,14,2.131,15,1.127,26,0.373,29,1.389,30,0.029,31,0.95,36,1.644,41,1.786,44,1.585,45,0.196,49,0.196,50,0.018,56,1.867,61,0.015,62,0.015,90,1.408,93,1.784,94,2.636,96,2.636,106,1.666,116,1.135,125,3.253,188,2.655,193,1.784,200,2.095,201,1.127,219,1.579,224,1.998,233,3.012,246,1.102,249,1.213,291,1.644,331,2.826,332,2.355,333,3.123,335,2.636,336,1.767,338,1.767,340,1.196,363,2.636,379,3.123,391,3.995,392,3.012,397,2.997,398,4.274,399,1.767,400,2.636,401,2.636,402,1.784,403,3.012,404,3.012,405,3.023,406,3.012,407,1.944,408,3.583,409,3.451,410,4.752,411,3.995,412,3.583,413,2.549,414,2.817,415,2.402,416,2.402,417,4.773,418,3.583,419,3.583,420,3.012,421,2.636,422,3.583,423,2.402,424,2.402,425,3.583,426,5.332,427,4.752,428,3.496,429,5.332,430,4.752,431,3.496,432,3.995,433,3.583,434,2.402,435,2.402,436,3.583,437,2.402,438,3.583,439,3.583,440,3.583,441,3.583,442,6.291,443,4.752,444,5.678,445,2.016,446,3.583,447,2.402,448,3.583,449,3.012,450,3.012,451,3.583,452,3.583,453,3.583,454,2.019,455,1.579,456,4.752,457,1.767,458,2.019,459,2.402,460,2.402]],["title/classes/GetUserParamsDto.html",[50,0.014,461,1.958]],["body/classes/GetUserParamsDto.html",[3,0.279,4,0.243,5,0.243,7,0.782,15,1.452,26,0.532,29,1.003,30,0.029,31,0.686,41,1.452,44,1.163,45,0.376,49,0.279,50,0.023,56,1.348,59,1.814,61,0.02,62,0.02,91,2.367,94,3.396,96,3.396,106,1.788,116,1.115,138,1.814,188,2.299,199,2.672,201,1.755,219,2.255,221,2.118,224,1.814,232,2.123,246,1.575,249,1.563,291,2.118,332,3.034,340,1.709,341,2.524,367,2.745,389,1.958,400,3.396,403,3.881,404,3.881,421,3.396,445,2.544,454,2.885,461,3.318,462,3.881,463,2.885,464,2.778,465,4.386,466,4.617,467,4.617,468,3.028,469,3.034,470,3.396,471,4.617,472,3.432,473,3.432,474,3.028,475,3.881,476,4.617,477,3.034,478,4.617,479,3.396,480,4.617,481,4.617,482,4.617,483,4.617,484,2.885]],["title/entities/MetaOption.html",[485,1.115,486,1.511]],["body/entities/MetaOption.html",[3,0.339,4,0.294,5,0.294,26,0.646,29,1.756,30,0.029,31,1.201,44,1.319,45,0.339,49,0.339,50,0.017,61,0.022,62,0.022,111,2.842,116,1.238,118,2.26,211,2.607,232,2.088,249,1.773,283,3.95,290,3.442,345,2.434,364,4.214,445,2.221,485,1.773,486,2.403,487,3.501,488,3.765,489,4.815,490,4.815,491,4.165,492,3.765,493,4.165,494,2.737,495,3.442,496,4.165,497,4.815,498,4.165,499,3.442,500,1.767]],["title/controllers/MetaOptionsController.html",[0,1.036,501,2.164]],["body/controllers/MetaOptionsController.html",[0,1.552,2,1.194,3,0.309,4,0.268,5,0.268,7,0.983,26,0.589,27,2.093,29,1.109,30,0.029,31,0.758,33,1.61,45,0.473,46,0.821,49,0.309,50,0.016,51,2.264,57,2.494,58,1.741,59,1.491,61,0.021,62,0.021,92,2.093,110,3.171,111,2.264,116,0.758,152,2.257,158,1.889,164,3.243,165,1.61,168,2.257,169,2.792,170,2.792,171,1.889,194,2.73,199,1.741,200,1.491,201,1.194,221,2.264,224,1.491,230,2.494,260,2.155,268,3.15,270,4.609,345,1.939,347,2.792,368,5.186,402,2.891,501,3.243,502,3.19,503,4.881,504,3.795,505,3.19,506,3.243,507,3.795,508,4.148,509,2.677,510,3.795,511,3.795,512,2.494,513,2.975,514,3.19,515,3.19,516,2.059,517,3.63,518,3.63,519,3.795,520,3.795,521,2.792,522,3.795,523,3.795]],["title/modules/MetaOptionsModule.html",[63,1.036,76,1.958]],["body/modules/MetaOptionsModule.html",[2,1.679,3,0.35,4,0.303,5,0.303,30,0.029,45,0.509,46,0.929,49,0.35,50,0.018,61,0.023,62,0.023,63,1.827,65,1.822,66,1.971,67,2.33,68,2.33,69,1.971,70,3.151,71,2.33,76,3.788,80,2.896,81,2.33,82,2.138,88,2.33,104,2.554,105,1.822,110,2.658,111,1.971,252,2.823,345,1.687,485,1.454,486,1.971,501,3.818,509,2.33,513,3.456,514,3.61,515,3.61,524,3.61,525,3.61,526,4.294,527,4.294,528,2.554,529,4.294,530,3.61,531,2.823]],["title/injectables/MetaOptionsService.html",[130,1.2,513,1.787]],["body/injectables/MetaOptionsService.html",[3,0.331,4,0.288,5,0.288,26,0.632,27,2.189,30,0.029,31,1.031,33,1.726,45,0.501,46,0.88,49,0.331,50,0.017,59,1.599,61,0.022,62,0.022,105,1.726,110,2.57,116,1.031,130,1.882,131,2.208,194,2.822,196,3.069,199,2.368,200,2.028,201,1.623,239,2.42,260,1.599,268,3.234,345,2.227,347,2.994,486,1.868,500,1.726,503,4.339,513,2.8,516,2.208,528,2.42,532,4.765,533,3.422,534,4.17,535,4.07,536,3.918,537,4.07,538,5.161,539,5.161,540,4.07,541,4.07,542,2.994,543,2.994,544,3.422,545,5.668,546,4.07,547,2.994,548,4.07]],["title/classes/PatchPostDto.html",[50,0.014,549,2.164]],["body/classes/PatchPostDto.html",[3,0.374,4,0.324,5,0.324,26,0.712,29,1.342,30,0.029,31,0.917,45,0.487,49,0.374,50,0.023,61,0.024,62,0.024,116,0.917,165,1.947,232,2.181,245,2.491,246,2.107,248,3.378,249,1.883,325,3.655,331,3.307,340,2.286,445,2.359,506,3.018,549,3.655,550,4.675,551,4.675,552,5.562,553,4.591,554,4.591,555,3.86,556,5.562,557,3.378]],["title/classes/PatchUserDto.html",[50,0.014,558,2.164]],["body/classes/PatchUserDto.html",[3,0.402,4,0.349,5,0.349,30,0.028,45,0.473,49,0.402,50,0.02,61,0.025,62,0.025,246,2.263,397,2.676,399,3.629,506,3.242,551,4.88,555,4.146,558,3.815,559,4.146,560,5.805,561,4.146,562,4.146,563,3.629]],["title/entities/Posts.html",[92,1.397,485,1.115]],["body/entities/Posts.html",[3,0.228,4,0.198,5,0.198,26,0.435,29,1.811,30,0.029,31,1.239,44,1.577,45,0.416,49,0.228,50,0.012,61,0.017,62,0.017,92,1.702,111,1.287,116,1.31,118,1.521,120,3.475,158,2.333,211,2.952,232,1.708,249,1.358,250,3.08,251,3.939,252,3.08,253,3.08,254,3.939,255,3.08,256,2.542,257,3.447,258,3.08,269,2.637,275,3.981,283,2.637,310,3.981,316,2.177,342,3.373,343,2.357,344,2.357,345,1.102,350,4.984,389,1.702,428,3.763,445,1.702,449,3.373,485,1.358,486,2.347,492,3.08,494,3.967,495,4.309,499,4.025,500,1.189,528,1.667,564,2.357,565,4.733,566,2.637,567,2.804,568,4.142,569,4.142,570,2.804,571,2.804,572,2.804,573,2.804,574,2.804,575,2.804,576,3.373,577,2.804,578,2.804,579,2.804,580,2.804,581,2.804,582,2.804,583,4.012,584,4.012]],["title/controllers/PostsController.html",[0,1.036,585,2.164]],["body/controllers/PostsController.html",[0,1.529,2,0.534,3,0.138,4,0.12,5,0.12,7,0.961,10,1.577,13,2.259,14,2.044,15,1.24,17,1.798,26,0.263,27,1.16,29,1.004,30,0.029,31,0.687,33,2.441,36,1.255,41,1.454,44,1.164,45,0.352,46,0.367,49,0.138,50,0.007,51,1.984,52,0.845,53,2.301,54,0.845,55,0.779,56,1.549,58,0.779,59,1.351,61,0.012,62,0.012,87,2.508,90,1.549,92,2.499,106,1.582,116,0.687,138,1.351,142,2.346,152,1.009,154,1.577,158,2.153,164,1.798,165,0.72,168,1.627,169,1.249,170,1.249,171,1.711,177,1.116,188,2.301,190,2.301,193,1.362,194,2.6,196,1.009,199,1.577,200,1.351,201,1.081,216,2.9,220,1.627,224,2.106,230,1.798,232,1.844,234,1.116,239,1.009,245,2.744,250,4.003,253,1.798,256,1.484,258,3.324,260,2.603,291,1.809,316,1.484,379,1.116,389,1.16,401,2.9,402,2.518,407,2.139,464,1.963,468,1.484,469,1.798,474,2.508,477,1.798,488,1.798,505,1.427,508,3.314,509,2.139,512,3.195,516,0.921,517,2.013,518,2.9,521,1.249,531,1.116,549,3.324,557,2.013,585,3.324,586,1.427,587,2.3,588,2.3,589,3.314,590,3.885,591,2.9,592,2.3,593,2.3,594,3.437,595,2.736,596,1.427,597,2.736,598,1.697,599,1.697,600,2.013,601,4.251,602,2.3,603,2.3,604,2.3,605,3.4,606,2.736,607,2.736,608,3.314,609,2.3,610,2.013,611,2.3,612,2.3,613,1.697,614,2.3,615,2.9,616,1.697,617,1.697,618,2.3,619,3.314,620,2.736,621,2.3,622,2.013,623,1.697,624,4.861,625,3.885,626,3.314,627,2.736,628,2.3,629,1.697,630,3.885,631,1.697,632,1.697,633,2.748,634,3.314,635,2.013,636,3.885,637,2.736,638,2.736,639,2.3,640,2.3,641,3.437,642,2.508,643,1.427,644,1.427,645,1.697,646,1.697,647,1.697,648,1.697,649,1.697,650,1.697,651,1.697,652,1.697,653,1.427,654,1.697,655,1.697]],["title/modules/PostsModule.html",[63,1.036,77,1.958]],["body/modules/PostsModule.html",[2,1.477,3,0.287,4,0.249,5,0.249,7,0.795,15,1.477,24,2.338,30,0.029,45,0.502,46,0.761,49,0.287,50,0.015,61,0.02,62,0.02,63,2.016,65,1.493,66,1.615,67,1.909,68,1.909,69,1.615,70,2.867,71,1.909,77,3.773,79,3.008,80,2.547,81,1.909,82,1.752,88,2.547,90,1.845,91,1.992,92,2.491,104,2.093,105,1.493,106,1.274,111,1.615,138,2.076,154,2.425,160,2.792,180,3.947,184,2.958,185,3.887,190,2.807,224,2.076,260,2.539,345,1.383,405,2.792,407,2.547,464,2.338,470,3.454,474,2.547,486,2.154,528,2.093,585,3.473,633,2.792,642,3.278,643,2.958,656,2.958,657,3.519,658,2.958,659,3.519,660,4.695,661,4.695,662,3.519,663,2.958,664,3.519]],["title/injectables/PostsService.html",[130,1.2,642,1.787]],["body/injectables/PostsService.html",[3,0.14,4,0.121,5,0.121,7,0.736,9,1.373,10,1.265,15,1.367,26,0.266,27,1.169,30,0.029,31,0.691,33,2.281,41,1.247,44,0.999,45,0.397,46,0.371,49,0.14,50,0.007,51,1.819,52,1.373,53,1.722,54,1.373,55,2.239,56,1.359,58,0.786,59,1.359,61,0.012,62,0.012,87,2.518,90,1.994,91,1.169,92,2.281,95,1.812,105,0.727,106,1.728,111,0.786,116,0.691,129,1.44,130,1.005,131,0.93,133,2.606,134,2.357,138,2.159,142,2.151,144,1.019,148,3.051,154,1.819,177,1.812,186,1.261,190,1.722,191,2.404,193,2.311,194,2.43,196,1.639,197,1.44,199,1.587,200,1.359,201,1.088,216,2.916,219,1.812,220,1.639,221,1.265,224,2.159,228,1.126,232,2.074,234,2.274,235,1.44,239,2.057,243,1.44,244,1.44,245,2.842,250,3.88,252,1.812,253,1.812,256,1.496,258,2.606,260,2.55,269,1.126,291,1.819,294,2.318,316,1.496,345,0.673,389,1.681,402,2.163,405,3.018,413,1.639,432,2.318,455,1.812,464,1.373,468,1.496,474,1.496,486,1.265,488,2.606,500,0.727,509,2.151,512,1.126,516,0.93,528,1.019,534,2.916,536,3.534,542,1.261,543,1.261,544,1.44,547,2.916,557,1.261,576,2.318,593,2.318,596,2.318,604,2.318,605,3.59,608,3.332,609,2.318,610,2.028,611,2.318,612,3.332,618,2.318,619,2.318,621,2.318,622,2.028,642,2.754,653,1.44,663,1.44,665,1.44,666,2.318,667,2.318,668,2.757,669,2.757,670,3.459,671,3.459,672,1.713,673,1.713,674,2.757,675,4.345,676,2.757,677,2.757,678,1.713,679,2.318,680,2.757,681,2.757,682,2.757,683,2.757,684,2.318,685,2.318,686,2.757,687,2.757,688,2.757,689,1.713,690,2.757,691,2.757,692,2.757,693,2.757,694,2.757,695,2.318,696,2.318,697,2.757,698,1.713,699,1.713,700,1.44,701,1.713,702,2.757,703,1.713,704,1.713,705,1.713,706,1.713,707,1.713,708,1.713]],["title/entities/Tag.html",[376,1.958,485,1.115]],["body/entities/Tag.html",[3,0.259,4,0.225,5,0.225,7,0.85,26,0.494,29,1.816,30,0.029,31,1.241,44,1.584,45,0.259,49,0.259,50,0.013,61,0.019,62,0.019,116,1.296,118,1.726,120,3.411,200,2.125,201,1.925,211,2.693,221,1.46,232,1.829,249,1.485,255,3.298,256,2.722,283,3.854,367,1.892,375,4.218,376,2.984,389,2.487,409,1.892,431,3.226,445,1.86,485,1.485,488,3.298,489,4.218,490,4.218,492,3.298,494,3.728,495,4.023,497,4.218,499,3.854,500,1.35,565,4.546,566,3.298,568,4.314,569,4.314,709,2.675,710,5.018,711,3.182,712,5.018,713,3.182,714,3.182,715,4.385,716,3.182,717,3.182,718,5.408,719,3.182,720,3.182,721,3.182,722,3.182,723,3.686]],["title/controllers/TagsController.html",[0,1.036,724,2.164]],["body/controllers/TagsController.html",[0,1.591,2,1.591,3,0.412,4,0.357,5,0.357,30,0.028,45,0.412,46,1.094,49,0.412,50,0.021,61,0.025,62,0.025,152,3.007,257,3.721,724,3.872,725,4.251,726,5.057]],["title/modules/TagsModule.html",[63,1.036,78,1.958]],["body/modules/TagsModule.html",[2,1.771,3,0.382,4,0.331,5,0.331,30,0.029,45,0.51,46,1.014,49,0.382,50,0.019,61,0.024,62,0.024,63,1.771,65,1.988,78,3.349,88,2.543,104,2.787,105,1.988,376,3.349,485,1.587,509,2.543,530,3.94,531,3.081,724,3.968,727,4.687,728,4.687,729,4.687,730,4.687]],["title/entities/User.html",[106,0.894,485,1.115]],["body/entities/User.html",[3,0.298,4,0.258,5,0.258,26,0.567,29,1.738,30,0.029,31,1.188,44,1.592,45,0.298,49,0.298,50,0.015,61,0.02,62,0.02,106,1.307,116,1.277,118,1.983,120,3.105,125,2.921,201,1.15,211,3.04,221,1.677,232,1.963,249,1.63,269,2.403,367,2.174,389,2.284,409,3.403,413,3.202,414,3.539,428,4.648,431,2.689,445,2.042,485,1.63,492,3.539,494,3.761,495,4.153,499,3.909,500,1.55,566,3.539,568,4.648,569,4.648,723,3.073,731,3.073,732,3.655,733,3.655,734,3.655,735,3.655,736,3.655,737,3.655]],["title/controllers/UsersController.html",[0,1.036,738,2.164]],["body/controllers/UsersController.html",[0,1.419,2,0.507,3,0.131,4,0.114,5,0.114,7,0.975,10,1.522,13,2.18,14,1.972,15,0.825,17,1.723,18,2.513,26,0.25,27,1.112,29,0.969,30,0.029,31,0.663,33,2.41,36,1.203,41,1.731,44,0.406,45,0.367,46,0.348,49,0.131,50,0.007,51,2.182,52,0.802,53,2.469,54,0.802,55,0.739,56,1.502,57,1.058,58,0.739,59,2.071,61,0.011,62,0.011,90,1.502,91,2.593,106,1.778,116,1.078,125,1.423,138,1.303,142,1.423,152,0.958,154,1.522,158,0.802,159,1.559,164,1.058,165,0.683,171,1.305,188,2.246,190,1.305,191,1.931,193,1.903,194,2.553,199,2.353,200,1.773,201,1.496,211,2.246,220,1.559,221,1.203,224,2.162,228,2.513,230,1.723,232,1.922,240,1.185,260,1.654,279,3.546,291,1.203,316,1.423,379,2.965,389,1.621,397,2.86,401,2.812,402,2.624,405,1.559,407,1.423,409,0.958,413,2.683,414,1.723,417,2.204,420,3.213,421,1.185,445,2.593,455,1.723,457,1.929,458,2.204,461,2.948,464,1.903,465,2.788,468,1.799,469,2.513,474,2.448,475,2.204,477,1.723,484,1.354,512,3.126,516,0.874,517,1.929,518,1.929,521,1.185,558,3.546,563,1.929,566,2.513,587,2.204,588,2.204,589,2.204,590,3.213,591,1.929,600,1.929,601,3.792,602,2.204,603,2.204,614,2.204,615,2.812,625,2.204,626,2.204,628,2.204,630,3.213,633,2.683,634,3.213,635,1.929,636,3.998,639,2.204,640,3.213,644,1.354,685,1.354,738,3.259,739,1.354,740,4.431,741,2.622,742,2.204,743,2.788,744,2.622,745,1.354,746,1.61,747,1.61,748,2.622,749,2.622,750,2.622,751,1.354,752,3.998,753,1.61,754,1.61,755,2.622,756,1.61,757,1.61,758,3.213,759,1.61,760,1.61,761,3.213,762,2.622,763,2.622,764,1.61,765,2.622,766,2.788,767,2.622,768,1.61,769,1.61,770,3.213,771,3.316,772,1.61,773,1.354,774,1.354,775,1.354,776,3.823,777,1.61,778,1.61,779,1.61,780,1.61,781,1.61,782,1.61,783,1.61,784,1.61,785,1.61,786,1.61,787,1.61,788,1.61,789,1.61,790,1.61,791,1.61,792,1.61]],["title/modules/UsersModule.html",[63,1.036,79,1.64]],["body/modules/UsersModule.html",[2,1.477,3,0.287,4,0.249,5,0.249,7,0.795,15,1.477,24,2.338,30,0.029,45,0.502,46,0.761,49,0.382,50,0.015,61,0.02,62,0.02,63,2.016,65,1.992,66,1.615,67,1.909,68,1.909,69,1.615,70,2.867,71,2.867,75,2.547,79,3.12,80,2.547,81,1.909,82,1.752,88,1.909,90,1.845,91,1.992,93,2.338,104,2.093,105,1.493,106,1.777,138,2.076,154,2.425,160,2.792,182,3.086,185,3.887,186,2.589,190,2.807,191,3.004,224,2.076,405,2.792,407,2.547,411,3.947,464,2.338,470,3.454,485,1.191,500,1.493,633,2.792,738,3.473,775,2.958,793,2.958,794,2.958,795,2.958,796,3.519,797,4.695,798,3.519,799,3.519,800,2.958,801,3.519]],["title/injectables/UsersService.html",[130,1.2,191,1.511]],["body/injectables/UsersService.html",[3,0.129,4,0.112,5,0.112,7,0.758,9,1.288,10,1.187,15,1.312,18,1.041,26,0.246,27,1.097,30,0.029,31,0.756,33,2.431,41,1.408,44,0.826,45,0.385,46,0.342,49,0.129,50,0.007,51,2.054,52,1.632,53,2.228,54,1.288,55,2.167,56,1.487,58,0.727,59,1.759,61,0.011,62,0.011,90,1.487,91,2.223,93,2.228,95,1.7,97,1.165,105,0.672,106,1.79,116,0.756,125,1.403,130,0.943,131,0.859,133,2.487,134,2.25,138,1.855,142,2.428,144,0.942,148,3.104,154,1.736,159,2.25,161,2.672,168,0.942,176,1.902,177,1.7,182,1.7,190,1.632,191,2.338,193,2.228,194,2.537,196,1.538,199,2.405,200,1.487,201,1.408,204,1.331,205,2.174,220,2.25,221,2.338,224,2.003,228,2.487,232,2.09,234,1.041,236,1.331,237,1.331,238,1.331,239,1.538,240,1.165,241,1.331,242,1.331,279,3.104,291,2.26,292,1.902,316,1.403,389,1.097,397,2.562,400,1.902,402,2.351,409,3.485,413,3.256,414,3.599,445,2.363,450,3.181,455,2.942,457,3.474,461,3.449,464,1.288,468,1.403,469,2.487,474,1.403,479,2.784,500,0.672,506,1.041,509,1.403,516,0.859,534,2.412,536,2.487,542,1.165,543,1.165,547,2.784,563,1.165,600,1.902,615,2.784,622,1.902,666,2.174,667,2.174,679,2.174,684,3.506,695,3.506,696,3.506,700,2.174,740,3.181,742,2.174,743,2.756,745,2.174,751,1.331,752,3.506,758,2.174,761,2.174,766,2.174,770,1.331,773,1.331,774,1.331,800,1.331,802,1.331,803,2.586,804,1.583,805,1.583,806,2.586,807,1.583,808,4.476,809,4.171,810,2.586,811,3.784,812,3.784,813,3.784,814,2.586,815,2.586,816,2.586,817,1.583,818,3.784,819,2.586,820,2.586,821,2.586,822,3.278,823,1.583,824,1.902,825,2.586,826,2.586,827,2.586,828,2.586,829,3.278,830,1.583,831,1.583,832,1.583,833,2.586,834,1.583,835,1.583,836,1.583,837,1.583,838,1.583,839,1.583,840,1.583,841,1.583,842,1.583,843,2.586,844,1.583,845,1.583,846,1.583,847,1.583,848,1.583]],["title/coverage.html",[849,3.303]],["body/coverage.html",[0,1.91,1,2.355,5,0.253,6,3.011,30,0.029,47,1.944,50,0.026,61,0.02,62,0.02,69,1.644,92,1.519,106,1.29,110,1.784,111,2.18,116,0.716,130,2.154,132,3.011,150,2.355,151,3.011,161,1.784,171,1.784,187,3.011,191,1.644,245,1.944,247,3.011,248,3.495,260,1.408,268,1.944,345,2.231,346,2.635,366,3.011,372,2.635,373,3.011,374,3.011,376,2.13,397,1.944,398,3.011,399,3.495,402,1.784,461,2.13,462,3.011,463,3.011,468,1.944,485,1.922,486,1.644,487,3.011,501,2.355,502,3.011,513,1.944,532,3.011,533,3.011,549,2.355,550,3.011,558,2.355,559,3.011,564,3.011,585,2.355,586,3.011,642,1.944,665,3.011,709,3.011,724,2.355,725,3.011,731,3.011,738,2.355,739,3.011,802,3.011,849,2.635,850,3.582,851,6.481,852,5.331,853,4.751,854,5.677,855,3.011,856,3.011,857,6.525,858,5.331,859,6.072,860,3.582,861,3.582,862,3.582,863,4.751,864,3.582,865,3.582]],["title/dependencies.html",[66,1.817,866,2.314]],["body/dependencies.html",[30,0.029,46,1.016,50,0.023,61,0.024,62,0.024,66,2.156,105,1.993,165,1.993,340,2.34,341,3.457,500,1.993,561,3.951,562,3.951,605,3.457,867,4.7,868,4.7,869,6.044,870,4.7,871,4.7,872,4.7,873,4.7,874,4.7,875,4.7,876,4.7,877,4.7,878,4.7,879,4.7,880,4.7,881,4.7,882,4.7,883,4.7,884,4.7]],["title/miscellaneous/enumerations.html",[885,1.809,886,3.328]],["body/miscellaneous/enumerations.html",[26,0.725,30,0.028,61,0.024,62,0.024,260,2.209,275,4.136,279,3.696,280,4.727,284,4.727,310,4.136,311,4.727,312,4.727,313,4.727,351,4.727,367,3.943,885,3.073,886,3.93,887,5.623,888,5.623,889,5.623,890,5.623]],["title/miscellaneous/functions.html",[885,1.809,891,3.328]],["body/miscellaneous/functions.html",[9,3.016,19,3.105,20,3.476,21,3.476,26,0.733,30,0.024,61,0.024,62,0.024,69,2.881,87,2.563,113,3.971,171,2.817,188,3.016,292,3.476,406,3.971,407,2.563,477,3.105,591,3.476,592,3.971,855,3.971,856,4.756,885,3.105,891,3.971,892,4.724,893,4.724,894,4.724,895,4.724,896,4.724,897,4.724,898,4.724,899,3.971,900,4.724,901,4.724,902,4.724,903,3.971,904,3.971,905,3.971]],["title/index.html",[26,0.427,906,2.752,907,2.752]],["body/index.html",[4,0.22,7,0.527,9,2.899,30,0.028,34,2.288,41,1.684,61,0.018,62,0.018,82,2.899,87,3.303,144,3.462,147,2.615,171,2.149,193,1.549,277,2.615,362,2.615,369,2.288,479,2.288,531,2.044,536,2.044,610,3.647,633,1.85,635,2.288,824,3.94,849,2.288,899,2.615,903,3.629,904,2.615,905,3.629,908,3.11,909,3.11,910,4.317,911,3.11,912,3.11,913,3.11,914,4.317,915,4.958,916,3.11,917,5.355,918,3.11,919,6.088,920,3.11,921,5.971,922,3.11,923,3.11,924,3.11,925,4.317,926,3.11,927,3.11,928,4.958,929,3.11,930,4.317,931,3.11,932,3.11,933,3.11,934,3.11,935,5.355,936,4.317,937,3.11,938,3.11,939,3.11,940,3.11,941,5.355,942,4.317,943,3.11,944,4.317,945,5.626,946,5.355,947,3.11,948,4.317,949,3.11,950,3.11,951,3.11,952,3.11,953,5.355,954,3.11,955,3.11,956,3.11,957,3.11,958,4.317,959,3.11,960,3.11,961,3.11,962,3.11,963,3.11,964,4.317,965,3.11,966,3.11,967,4.317,968,3.11,969,3.11,970,4.317,971,3.11,972,3.11,973,3.11,974,3.11,975,3.11,976,3.11,977,3.11,978,3.11,979,4.317,980,3.11,981,2.615,982,3.11,983,3.11,984,4.958,985,3.11,986,3.11,987,3.11,988,3.11,989,3.11,990,4.317,991,3.11,992,3.11,993,3.11,994,3.11,995,4.317,996,3.11,997,3.11,998,3.11,999,4.317,1000,4.317,1001,3.11,1002,3.11,1003,3.11,1004,3.11,1005,3.11,1006,3.11,1007,3.11,1008,3.11,1009,3.11,1010,3.11,1011,2.615,1012,3.11,1013,3.11,1014,3.11,1015,3.11,1016,3.11,1017,3.11,1018,2.615]],["title/modules.html",[65,1.904]],["body/modules.html",[30,0.025,61,0.025,62,0.025,64,3.215,65,2.075,75,2.654,76,2.909,77,2.909,78,2.909,79,2.436,824,4.767,981,4.112,1019,6.48,1020,6.48,1021,6.569,1022,4.892]],["title/overview.html",[1023,3.774]],["body/overview.html",[2,1.255,30,0.028,47,3.046,61,0.022,62,0.022,63,1.255,64,4.394,65,1.692,66,1.83,67,2.164,68,2.164,69,1.83,70,2.164,71,2.164,72,3.353,73,3.353,74,3.353,75,3.392,76,3.635,77,3.779,78,3.339,79,3.164,80,2.765,81,2.164,82,1.986,118,2.164,131,2.164,161,3.164,172,3.353,173,3.353,174,3.353,191,2.916,246,1.83,513,3.046,524,3.353,525,3.353,642,3.046,656,3.353,658,3.353,793,3.353,794,3.353,795,3.353,1023,3.353,1024,5.095,1025,3.989,1026,3.989,1027,3.989]],["title/properties.html",[249,1.34,866,2.314]],["body/properties.html",[7,0.874,30,0.028,61,0.025,62,0.025,249,1.747,1011,4.337,1018,4.337,1028,5.159,1029,5.159,1030,5.159]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1029,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["0.3.24",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["06",{"_index":687,"title":{},"body":{"injectables/PostsService.html":{}}}],["1",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.26",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":766,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["100",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{}}}],["1024",{"_index":715,"title":{},"body":{"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":759,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.0",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1231",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["1234",{"_index":484,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["1234})@apiquery({name",{"_index":757,"title":{},"body":{"controllers/UsersController.html":{}}}],["123get",{"_index":764,"title":{},"body":{"controllers/UsersController.html":{}}}],["128",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Posts.html":{}}}],["13t",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["16t07:46:32+0000",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.1.0",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":614,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":508,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{}}}],["2023",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{}}}],["2024",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":718,"title":{},"body":{"entities/Tag.html":{}}}],["3",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["4",{"_index":1025,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["456",{"_index":621,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["5",{"_index":1026,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":1024,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1027,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["789",{"_index":611,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["8",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.16.0",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Posts.html":{},"entities/User.html":{}}}],["accepts",{"_index":602,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["access",{"_index":840,"title":{},"body":{"injectables/UsersService.html":{}}}],["account",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["action",{"_index":748,"title":{},"body":{"controllers/UsersController.html":{}}}],["add",{"_index":530,"title":{},"body":{"modules/MetaOptionsModule.html":{},"modules/TagsModule.html":{}}}],["additional",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["address",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["against",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["alice",{"_index":811,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":959,"title":{},"body":{"index.html":{}}}],["allows",{"_index":626,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["aloce@sfafa.com",{"_index":813,"title":{},"body":{"injectables/UsersService.html":{}}}],["already",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1005,"title":{},"body":{"index.html":{}}}],["another",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{}}}],["api",{"_index":592,"title":{},"body":{"controllers/PostsController.html":{},"miscellaneous/functions.html":{}}}],["apioperation",{"_index":517,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":505,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isint()@isnotempty",{"_index":553,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{}}}],["apiproperty({enum",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["apiquery",{"_index":776,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":518,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":597,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('meta",{"_index":520,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["apitags('posts",{"_index":646,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":778,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":914,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":64,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":47,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.gethello",{"_index":149,"title":{},"body":{"injectables/AppService.html":{}}}],["array",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["asr@998178",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["associate",{"_index":660,"title":{},"body":{"modules/PostsModule.html":{}}}],["associated",{"_index":618,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["association",{"_index":668,"title":{},"body":{"injectables/PostsService.html":{}}}],["assuming",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["async",{"_index":534,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["attributes",{"_index":638,"title":{},"body":{"controllers/PostsController.html":{}}}],["auth",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":150,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authenticates",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["authmodule",{"_index":75,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1011,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authors",{"_index":661,"title":{},"body":{"modules/PostsModule.html":{}}}],["authservice",{"_index":161,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.isauth",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.login('john_doe",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["autoloadentities",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":481,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["available",{"_index":1022,"title":{},"body":{"modules.html":{}}}],["avoid",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":547,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":948,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1006,"title":{},"body":{"index.html":{}}}],["based",{"_index":479,"title":{},"body":{"classes/GetUserParamsDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["basic",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["before",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["between",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["blog",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":998,"title":{},"body":{"index.html":{}}}],["body",{"_index":512,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstraps",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["browse",{"_index":1021,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1019,"title":{},"body":{"modules.html":{}}}],["building",{"_index":910,"title":{},"body":{"index.html":{}}}],["business",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["capabilities",{"_index":470,"title":{},"body":{"classes/GetUserParamsDto.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["categorization",{"_index":607,"title":{},"body":{"controllers/PostsController.html":{}}}],["channel",{"_index":972,"title":{},"body":{"index.html":{}}}],["character",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":429,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checks",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["circular",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":50,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":958,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":943,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":524,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":525,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":656,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":657,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":658,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":793,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":794,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":795,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":499,"title":{},"body":{"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":494,"title":{},"body":{"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":965,"title":{},"body":{"index.html":{}}}],["communication",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["compodoc/compodoc",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["comprehensive",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":900,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configures",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["confirming",{"_index":750,"title":{},"body":{"controllers/UsersController.html":{}}}],["connectivity",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log('get",{"_index":841,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('getuserparamsdto",{"_index":834,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('limit",{"_index":835,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('page",{"_index":836,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":148,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constraints",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(metaoptionsrepository",{"_index":535,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":804,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contact",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["contain",{"_index":392,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["container",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["containing",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["contains",{"_index":135,"title":{},"body":{"injectables/AppService.html":{}}}],["content",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["control",{"_index":762,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":519,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":645,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":726,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":777,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["core",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["correct",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["correctly",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["courses",{"_index":978,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":849,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":506,"title":{},"body":{"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":509,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":488,"title":{},"body":{"entities/MetaOption.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":490,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmetaoption",{"_index":503,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["createmetaoption(@body",{"_index":522,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createmetaoption",{"_index":504,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createmetaoptiondto",{"_index":539,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createmetaoptiondto",{"_index":541,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpost",{"_index":593,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":653,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(createpostdto",{"_index":596,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":245,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto.slug",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostmetaoptiondto",{"_index":268,"title":{"classes/CreatePostMetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createtagdto",{"_index":372,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":742,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":745,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":397,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":845,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto})@apiquery({name",{"_index":756,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["creation",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["credentials",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["criteria",{"_index":480,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["current",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["data.'})@apiresponse({status",{"_index":507,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["database",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["date",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{}}}],["date().toisostring",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["declarations",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":650,"title":{},"body":{"controllers/PostsController.html":{}}}],["decorators",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":974,"title":{},"body":{"index.html":{}}}],["default",{"_index":566,"title":{},"body":{"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":785,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defines",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["deletedat",{"_index":710,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":712,"title":{},"body":{"entities/Tag.html":{}}}],["dependencies",{"_index":66,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["deploy",{"_index":935,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":947,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":905,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["deploywith",{"_index":957,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["detailed",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["details",{"_index":808,"title":{},"body":{"injectables/UsersService.html":{}}}],["development",{"_index":922,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":985,"title":{},"body":{"index.html":{}}}],["discord",{"_index":971,"title":{},"body":{"index.html":{}}}],["dive",{"_index":973,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doe",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["draft",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["dtos/create",{"_index":516,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":644,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e.g",{"_index":647,"title":{},"body":{"controllers/PostsController.html":{}}}],["e2e",{"_index":931,"title":{},"body":{"index.html":{}}}],["each",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":911,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":940,"title":{},"body":{"index.html":{}}}],["email",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":601,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["endpoints",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["ensure",{"_index":938,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":723,"title":{},"body":{"entities/Tag.html":{},"entities/User.html":{}}}],["enterprise",{"_index":989,"title":{},"body":{"index.html":{}}}],["entire",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["entities",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":485,"title":{"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["entry",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["enum",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{}}}],["enumerations",{"_index":886,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{}}}],["error",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["error('post",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{}}}],["error('unauthorized",{"_index":839,"title":{},"body":{"injectables/UsersService.html":{}}}],["error('user",{"_index":846,"title":{},"body":{"injectables/UsersService.html":{}}}],["example",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["existing",{"_index":625,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["existingpost",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["existinguser",{"_index":843,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":976,"title":{},"body":{"index.html":{}}}],["export",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["extended",{"_index":139,"title":{},"body":{"injectables/AppService.html":{}}}],["extends",{"_index":551,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["false})@isoptional()@isjson",{"_index":387,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["false})@isoptional()@isstring",{"_index":380,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["false})@isoptional()@isstring()@isurl()@maxlength(1024",{"_index":383,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["fast",{"_index":951,"title":{},"body":{"index.html":{}}}],["feature",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["featured",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["featuredimage",{"_index":375,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{}}}],["features",{"_index":961,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":475,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":679,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["few",{"_index":953,"title":{},"body":{"index.html":{}}}],["field",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["fields",{"_index":628,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filtering",{"_index":469,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":669,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(userid",{"_index":677,"title":{},"body":{"injectables/PostsService.html":{}}}],["first",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["firstname",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":960,"title":{},"body":{"index.html":{}}}],["follow",{"_index":992,"title":{},"body":{"index.html":{}}}],["format",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["forwardref",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["foundation",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["framework",{"_index":610,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["full",{"_index":988,"title":{},"body":{"index.html":{}}}],["function",{"_index":856,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionality",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["functions",{"_index":891,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":955,"title":{},"body":{"index.html":{}}}],["generated",{"_index":612,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["generates",{"_index":680,"title":{},"body":{"injectables/PostsService.html":{}}}],["generation",{"_index":606,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid",{"_index":648,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/{:id",{"_index":780,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/{:id}')@apioperation({summary",{"_index":753,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":594,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":613,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":906,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":803,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(getuserparamsdto",{"_index":816,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserparamsdto",{"_index":461,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getuserparamsdto.id",{"_index":786,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":743,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers(getuserparamsdto",{"_index":751,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["global",{"_index":896,"title":{},"body":{"miscellaneous/functions.html":{}}}],["graph",{"_index":981,"title":{},"body":{"index.html":{},"modules.html":{}}}],["greeting",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["group",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{}}}],["grow",{"_index":1002,"title":{},"body":{"index.html":{}}}],["grows",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["handle",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["handles",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":902,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hands",{"_index":975,"title":{},"body":{"index.html":{}}}],["handy",{"_index":966,"title":{},"body":{"index.html":{}}}],["health",{"_index":143,"title":{},"body":{"injectables/AppService.html":{}}}],["hello",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["help",{"_index":979,"title":{},"body":{"index.html":{}}}],["here",{"_index":531,"title":{},"body":{"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/TagsModule.html":{},"index.html":{}}}],["host",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["html",{"_index":747,"title":{},"body":{"controllers/UsersController.html":{}}}],["http",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@minlength(4)@maxlength(1024)@isurl",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg",{"_index":382,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1015,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphens",{"_index":396,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["hyphens.'})@maxlength(256",{"_index":394,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["id",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identification",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PostsService.html":{}}}],["identifier",{"_index":468,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["identifier.'})@apiresponse({status",{"_index":754,"title":{},"body":{"controllers/UsersController.html":{}}}],["image",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["implementation",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["implemented",{"_index":641,"title":{},"body":{"controllers/PostsController.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["includes",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["including",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indicating",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["individual",{"_index":741,"title":{},"body":{"controllers/UsersController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["infrastructure",{"_index":963,"title":{},"body":{"index.html":{}}}],["initializes",{"_index":893,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":130,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":131,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injection",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":543,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":544,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(posts",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":831,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":954,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":920,"title":{},"body":{"index.html":{}}}],["instance",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["integrates",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["integration",{"_index":666,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["integrity",{"_index":640,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["interact",{"_index":982,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["isauthenticated",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":556,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnumber",{"_index":483,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["isoptional",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["isoptional()@isjson",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isnumber()@type(undefined",{"_index":472,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["isstring",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issues",{"_index":832,"title":{},"body":{"injectables/UsersService.html":{}}}],["isurl",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":770,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["janedoe@gp.com",{"_index":838,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":995,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":997,"title":{},"body":{"index.html":{}}}],["john",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["john.doe@example.com",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john@example.com",{"_index":789,"title":{},"body":{"controllers/UsersController.html":{}}}],["john@hao.com",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["johndoe@fo.com",{"_index":829,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":1008,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":583,"title":{},"body":{"entities/Posts.html":{}}}],["json",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":1012,"title":{},"body":{"index.html":{}}}],["key",{"_index":369,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"index.html":{}}}],["last",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lastname",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["layer",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["learn",{"_index":968,"title":{},"body":{"index.html":{}}}],["legend",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":569,"title":{},"body":{"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["level",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["license",{"_index":1018,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1000,"title":{},"body":{"index.html":{}}}],["limit",{"_index":752,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":994,"title":{},"body":{"index.html":{}}}],["list",{"_index":615,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["localhost",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["logged",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["logic",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["login(username",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["long",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":942,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":471,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["loop",{"_index":991,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":391,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["main",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["maintaining",{"_index":639,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["makes",{"_index":949,"title":{},"body":{"index.html":{}}}],["manage",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["management",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["manages",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["managing",{"_index":962,"title":{},"body":{"index.html":{}}}],["matches",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(math.random",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{}}}],["mau",{"_index":945,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":758,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["maxlength",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["memberof",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["message",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["meta",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["metadata",{"_index":605,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["metaoption",{"_index":486,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Posts.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":671,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptions",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MetaOptionsModule.html":{},"entities/Posts.html":{},"injectables/PostsService.html":{}}}],["metaoptionscontroller",{"_index":501,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":76,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":538,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptionsservice",{"_index":513,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":885,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":999,"title":{},"body":{"index.html":{}}}],["mode",{"_index":925,"title":{},"body":{"index.html":{}}}],["module",{"_index":63,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":65,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":941,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":478,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["myśliwiec",{"_index":1013,"title":{},"body":{"index.html":{}}}],["name",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":986,"title":{},"body":{"index.html":{}}}],["needed",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{}}}],["nest",{"_index":915,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1017,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":561,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":956,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newly",{"_index":815,"title":{},"body":{"injectables/UsersService.html":{}}}],["newmetaoptions",{"_index":545,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["newpost",{"_index":675,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":809,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":909,"title":{},"body":{"index.html":{}}}],["npm",{"_index":919,"title":{},"body":{"index.html":{}}}],["null",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["nullable",{"_index":495,"title":{},"body":{"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number(userid",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["numbers",{"_index":393,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["object",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["objects",{"_index":622,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["object|object",{"_index":779,"title":{},"body":{"controllers/UsersController.html":{}}}],["offer",{"_index":996,"title":{},"body":{"index.html":{}}}],["official",{"_index":946,"title":{},"body":{"index.html":{}}}],["omitted",{"_index":476,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["one",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetoone",{"_index":584,"title":{},"body":{"entities/Posts.html":{}}}],["onetoone(undefined",{"_index":572,"title":{},"body":{"entities/Posts.html":{}}}],["open",{"_index":1001,"title":{},"body":{"index.html":{}}}],["operations",{"_index":138,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["option",{"_index":368,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"controllers/MetaOptionsController.html":{}}}],["option.dto",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option.dto.ts",{"_index":366,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["option.dto.ts:12",{"_index":371,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["optional",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":527,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":502,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:20",{"_index":511,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.entity",{"_index":528,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Posts.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["options.entity.ts",{"_index":487,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["options.entity.ts:12",{"_index":493,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:18",{"_index":496,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:21",{"_index":491,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:24",{"_index":498,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":526,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":515,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":533,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:14",{"_index":540,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":537,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Posts.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/services/meta",{"_index":532,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["organizes",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1023,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":866,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":761,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pagination",{"_index":740,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('userid",{"_index":649,"title":{},"body":{"controllers/PostsController.html":{}}}],["parameters",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto",{"_index":774,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto.ts",{"_index":463,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:29",{"_index":473,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["parseintpipe",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":987,"title":{},"body":{"index.html":{}}}],["partial",{"_index":634,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":555,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":552,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":560,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password123",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["password@123",{"_index":814,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":636,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":549,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":744,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":768,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":558,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["person",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["personal",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["personalization",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pg",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["pipes",{"_index":897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["placeholder",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["platform",{"_index":944,"title":{},"body":{"index.html":{}}}],["please",{"_index":970,"title":{},"body":{"index.html":{}}}],["point",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["port",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@minlength(4)@matches(/^[a",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":557,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:108",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:127",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:32",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:40",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:54",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:62",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:70",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:80",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:9",{"_index":554,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:90",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:98",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.metaoptions",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":92,"title":{"entities/Posts.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["posts.controller",{"_index":662,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.entity",{"_index":663,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["posts/123",{"_index":620,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/posts.entity",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":585,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":77,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":670,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":642,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice.createpost",{"_index":676,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice.findall('123",{"_index":683,"title":{},"body":{"injectables/PostsService.html":{}}}],["poststatus",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posttypes",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"miscellaneous/enumerations.html":{}}}],["powerful",{"_index":609,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["prefix",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primary",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["primarygeneratedcolumn",{"_index":492,"title":{},"body":{"entities/MetaOption.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["processes",{"_index":674,"title":{},"body":{"injectables/PostsService.html":{}}}],["processing",{"_index":604,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["production",{"_index":903,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["progressive",{"_index":908,"title":{},"body":{"index.html":{}}}],["project",{"_index":917,"title":{},"body":{"index.html":{}}}],["promise",{"_index":842,"title":{},"body":{"injectables/UsersService.html":{}}}],["proper",{"_index":591,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":249,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":797,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["providing",{"_index":627,"title":{},"body":{"controllers/PostsController.html":{}}}],["public",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{}}}],["query",{"_index":465,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":969,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1009,"title":{},"body":{"index.html":{}}}],["reading",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["readonly",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":904,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["real",{"_index":983,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":536,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":477,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["requests",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":379,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requirements",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["requiring",{"_index":952,"title":{},"body":{"index.html":{}}}],["reset",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":964,"title":{},"body":{"index.html":{}}}],["responding",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["response",{"_index":781,"title":{},"body":{"controllers/UsersController.html":{}}}],["restful",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["result",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieval",{"_index":464,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["retrieve",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieved",{"_index":755,"title":{},"body":{"controllers/UsersController.html":{}}}],["retrieves",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["retrieving",{"_index":467,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["return",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returning",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["returns",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["root",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["route",{"_index":651,"title":{},"body":{"controllers/PostsController.html":{}}}],["rules",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["run",{"_index":921,"title":{},"body":{"index.html":{}}}],["running",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":939,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":912,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Posts.html":{},"entities/Tag.html":{}}}],["secure",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UsersModule.html":{}}}],["securepass123",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["sensitive",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["serialize",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttypes)@isnotempty",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":899,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["services",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["services/auth.service",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/meta",{"_index":514,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["services/posts.service",{"_index":643,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["services/users.service",{"_index":775,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["session",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["setting",{"_index":894,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setup",{"_index":918,"title":{},"body":{"index.html":{}}}],["side",{"_index":913,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["simulated",{"_index":681,"title":{},"body":{"injectables/PostsService.html":{}}}],["simulating",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{}}}],["single",{"_index":767,"title":{},"body":{"controllers/UsersController.html":{}}}],["slug",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["small",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["smith",{"_index":812,"title":{},"body":{"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":474,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["specifically",{"_index":466,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["specified",{"_index":619,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["sponsors",{"_index":1004,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":892,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:37",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:27",{"_index":141,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":799,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/services/auth.service",{"_index":830,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/services/auth.service.ts",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/services/auth.service.ts:15",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:43",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:62",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":855,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Posts.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":550,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:113",{"_index":632,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:51",{"_index":617,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:81",{"_index":599,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.entity.ts",{"_index":564,"title":{},"body":{"entities/Posts.html":{},"coverage.html":{}}}],["src/posts/posts.entity.ts:15",{"_index":571,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:22",{"_index":582,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:29",{"_index":575,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:37",{"_index":579,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:44",{"_index":580,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:51",{"_index":567,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:57",{"_index":578,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:64",{"_index":570,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:70",{"_index":577,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:77",{"_index":581,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.entity.ts:81",{"_index":574,"title":{},"body":{"entities/Posts.html":{}}}],["src/posts/posts.module.ts",{"_index":659,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/services/posts.service.ts",{"_index":665,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/services/posts.service.ts:113",{"_index":673,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/services/posts.service.ts:21",{"_index":672,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/services/posts.service.ts:61",{"_index":678,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":373,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts",{"_index":725,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.entity.ts",{"_index":709,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tags.entity.ts:13",{"_index":717,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:21",{"_index":719,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:29",{"_index":721,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:35",{"_index":714,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:41",{"_index":720,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:48",{"_index":716,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:51",{"_index":711,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:54",{"_index":722,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.entity.ts:57",{"_index":713,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.module.ts",{"_index":727,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":462,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":559,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/services/users.service",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/services/users.service.ts",{"_index":802,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/services/users.service.ts:121",{"_index":807,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:20",{"_index":805,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:52",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:92",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity.ts",{"_index":731,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":733,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":736,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":732,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":737,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":734,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":739,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:120",{"_index":746,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:142",{"_index":769,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:89",{"_index":760,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":796,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":923,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":926,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":927,"title":{},"body":{"index.html":{}}}],["started",{"_index":907,"title":{"index.html":{}},"body":{}}],["starter",{"_index":916,"title":{},"body":{"index.html":{}}}],["startup",{"_index":901,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["statements",{"_index":850,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{}}}],["status.enum.ts",{"_index":888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":990,"title":{},"body":{"index.html":{}}}],["steps",{"_index":936,"title":{},"body":{"index.html":{}}}],["stored",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["story",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":950,"title":{},"body":{"index.html":{}}}],["string",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string})@isnotempty()@isjson",{"_index":370,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["string})@isstring()@isnotempty()@matches(/^[a",{"_index":390,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string})@isstring()@minlength(3)@maxlength(256",{"_index":385,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["structure",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["structures",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["success",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":631,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":598,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully.'})@post",{"_index":510,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["such",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":521,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{},"modules.html":{}}}],["supports",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["svg",{"_index":1020,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{}}}],["swagger/openapi",{"_index":898,"title":{},"body":{"miscellaneous/functions.html":{}}}],["symbol",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["synchronize",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":600,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["table",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":376,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tag.dto.ts",{"_index":374,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:22",{"_index":386,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:36",{"_index":395,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:46",{"_index":381,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:56",{"_index":388,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:68",{"_index":384,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":728,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.entity",{"_index":729,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":724,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":78,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["take",{"_index":937,"title":{},"body":{"index.html":{}}}],["technology",{"_index":377,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["temporal",{"_index":682,"title":{},"body":{"injectables/PostsService.html":{}}}],["test",{"_index":930,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":933,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":932,"title":{},"body":{"index.html":{}}}],["testing",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["tests",{"_index":928,"title":{},"body":{"index.html":{}}}],["text",{"_index":565,"title":{},"body":{"entities/Posts.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1003,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":837,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionrepository.create(createpostdto.metaoptions",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.create(createmetaoptiondto",{"_index":546,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(newmetaoptions",{"_index":548,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.createmetaoption(createmetaoption",{"_index":523,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create(createpostdto",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":708,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":654,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":652,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":847,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":844,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":848,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["this.usersservice.getuserbyid(getuserparamsdto",{"_index":787,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getusers(getuserparamsdto",{"_index":788,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":603,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["throughout",{"_index":667,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["throw",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["throws",{"_index":833,"title":{},"body":{"injectables/UsersService.html":{}}}],["time",{"_index":984,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":576,"title":{},"body":{"entities/Posts.html":{},"injectables/PostsService.html":{}}}],["title",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["topics",{"_index":378,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["touch",{"_index":1010,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"injectables/UsersService.html":{}}}],["transformed",{"_index":482,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["transformer",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"dependencies.html":{}}}],["true",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@joincolumn",{"_index":573,"title":{},"body":{"entities/Posts.html":{}}}],["true})@minlength(3",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":1016,"title":{},"body":{"index.html":{}}}],["type",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":500,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Posts.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":529,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([posts",{"_index":664,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":730,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":801,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":562,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["types.enum",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Posts.html":{}}}],["types.enum.ts",{"_index":889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":735,"title":{},"body":{"entities/User.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["understanding",{"_index":608,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["unique",{"_index":389,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/GetUserParamsDto.html":{},"entities/Posts.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":929,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":542,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1030,"title":{},"body":{"properties.html":{}}}],["up",{"_index":895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["update",{"_index":624,"title":{},"body":{"controllers/PostsController.html":{}}}],["update.'})@apiresponse({status",{"_index":629,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":630,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updatedat",{"_index":489,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":497,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":595,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":655,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":623,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":633,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["updating",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["uppercase",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["used",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["usefactory",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":106,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["user'})@get('/:userid",{"_index":616,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.dto",{"_index":563,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:36",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:78",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:93",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":800,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userid",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":798,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/123?limit=5&page=1",{"_index":763,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/user.entity",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["users?limit=10&page=2",{"_index":765,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller",{"_index":738,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":79,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":806,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":191,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice.createuser",{"_index":810,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.getuserbyid",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.getusers",{"_index":828,"title":{},"body":{"injectables/UsersService.html":{}}}],["uses",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":635,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["valid",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validate",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["validatenested",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validates",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"injectables/PostsService.html":{}}}],["validation",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":367,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"classes/GetUserParamsDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":568,"title":{},"body":{"entities/Posts.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["various",{"_index":637,"title":{},"body":{"controllers/PostsController.html":{}}}],["verification",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["verifies",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["verify",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["version",{"_index":1028,"title":{},"body":{"properties.html":{}}}],["video",{"_index":977,"title":{},"body":{"index.html":{}}}],["visit",{"_index":967,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":980,"title":{},"body":{"index.html":{}}}],["watch",{"_index":924,"title":{},"body":{"index.html":{}}}],["way",{"_index":145,"title":{},"body":{"injectables/AppService.html":{}}}],["website",{"_index":1014,"title":{},"body":{"index.html":{}}}],["whether",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["without",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["world",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["x",{"_index":993,"title":{},"body":{"index.html":{}}}],["yes",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1007,"title":{},"body":{"index.html":{}}}],["you're",{"_index":934,"title":{},"body":{"index.html":{}}}],["z0",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Main application controller that handles root-level HTTP requests.\nThis controller provides the basic endpoints for the application root path.\nIt serves as the entry point for testing application connectivity and\nbasic functionality verification.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Handles GET requests to the root path ('/').\nReturns a simple greeting message to verify that the application\nis running and responding to HTTP requests correctly.\nExample :GET /\n// Returns: \"Hello World!\"\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A greeting message from the application\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * Main application controller that handles root-level HTTP requests.\n *\n * This controller provides the basic endpoints for the application root path.\n * It serves as the entry point for testing application connectivity and\n * basic functionality verification.\n *\n * @controller AppController\n * @description Handles HTTP requests for the application root endpoints\n */\n@Controller()\nexport class AppController {\n  /**\n   * Creates an instance of AppController.\n   *\n   * @param {AppService} appService - The injected application service\n   * @memberof AppController\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Handles GET requests to the root path ('/').\n   *\n   * Returns a simple greeting message to verify that the application\n   * is running and responding to HTTP requests correctly.\n   *\n   * @returns {string} A greeting message from the application\n   * @memberof AppController\n   * @example\n   * GET /\n   * // Returns: \"Hello World!\"\n   */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The root application module that bootstraps and organizes the entire NestJS application.\nThis module serves as the entry point for the application and imports all feature modules\nincluding Users, Posts, and Authentication functionality. It defines the core application\nstructure and dependency injection container.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { Posts } from './posts/posts.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\n\n/**\n * The root application module that bootstraps and organizes the entire NestJS application.\n *\n * This module serves as the entry point for the application and imports all feature modules\n * including Users, Posts, and Authentication functionality. It defines the core application\n * structure and dependency injection container.\n *\n * @module AppModule\n * @description Main application module that configures the NestJS application\n */\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      useFactory: () => ({\n        type: 'postgres',\n        // entities: [User, Posts],\n        autoLoadEntities: true,\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'Asr@998178',\n        host: 'localhost',\n        database: 'nestjs',\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Main application service that provides core business logic.\nThis service contains the primary application logic and serves as the foundation\nfor the root-level functionality. It provides basic operations that can be\nextended as the application grows.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Returns a simple greeting message.\nThis method provides a basic health check functionality and serves\nas a simple way to verify that the service layer is working correctly.\nExample :const message = appService.getHello();\n// Returns: \"Hello World!\"\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A simple greeting message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Main application service that provides core business logic.\n *\n * This service contains the primary application logic and serves as the foundation\n * for the root-level functionality. It provides basic operations that can be\n * extended as the application grows.\n *\n * @service AppService\n * @description Core application service for basic operations\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Returns a simple greeting message.\n   *\n   * This method provides a basic health check functionality and serves\n   * as a simple way to verify that the service layer is working correctly.\n   *\n   * @returns {string} A simple greeting message\n   * @memberof AppService\n   * @example\n   * const message = appService.getHello();\n   * // Returns: \"Hello World!\"\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication controller that handles HTTP requests related to user authentication.\nThis controller provides endpoints for user authentication operations such as\nlogin, logout, and authentication status checks. It integrates with the\nAuthService to handle authentication business logic.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AuthService } from './services/auth.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * Authentication controller that handles HTTP requests related to user authentication.\n *\n * This controller provides endpoints for user authentication operations such as\n * login, logout, and authentication status checks. It integrates with the\n * AuthService to handle authentication business logic.\n *\n * @controller AuthController\n * @description Handles authentication-related HTTP requests\n */\n@Controller('auth')\n@ApiTags('Auth') // Use ApiTags to group the controller in Swagger documentation\nexport class AuthController {\n  /**\n   * Creates an instance of AuthController.\n   *\n   * @param {AuthService} authService - The injected authentication service\n   * @memberof AuthController\n   */\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Authentication module that handles user authentication and authorization.\nThis module provides authentication services including user login, logout,\nand authorization checks. It integrates with the Users module to validate\nuser credentials and manage authentication state.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthService } from './services/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n/**\n * Authentication module that handles user authentication and authorization.\n *\n * This module provides authentication services including user login, logout,\n * and authorization checks. It integrates with the Users module to validate\n * user credentials and manage authentication state.\n *\n * @module AuthModule\n * @description Manages authentication and authorization functionality\n */\n@Module({\n  providers: [AuthService],\n  controllers: [AuthController],\n  imports: [forwardRef(() => UsersModule)], // Import UsersModule with forwardRef if needed\n  exports: [AuthService], // Export AuthService if needed in other modules\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication service that provides authentication and authorization logic.\nThis service handles user authentication operations including login validation,\nsession management, and authorization checks. It integrates with the UsersService\nto validate user credentials and retrieve user information.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/services/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected users service for user operations\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/services/auth.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Checks if the current user is authenticated.\nThis method verifies the authentication status of the current session\nand returns a boolean indicating whether the user is authenticated.\nExample :const isAuthenticated = authService.isAuth();\n// Returns: false (placeholder implementation)\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if user is authenticated, false otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(username: string, password: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/services/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Authenticates a user with username and password.\nThis method validates user credentials and returns authentication status.\nIt retrieves user information from the UsersService and validates the\nprovided credentials against stored user data.\nExample :const result = authService.login('john_doe', 'password123', '1');\n// Returns: \"Logged in successfully\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username for authentication\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password for authentication\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional user ID for additional validation\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Authentication result message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UsersService } from 'src/users/services/users.service';\n\n/**\n * Authentication service that provides authentication and authorization logic.\n *\n * This service handles user authentication operations including login validation,\n * session management, and authorization checks. It integrates with the UsersService\n * to validate user credentials and retrieve user information.\n *\n * @service AuthService\n * @description Provides authentication and authorization functionality\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Creates an instance of AuthService.\n   *\n   * @param {UsersService} usersService - The injected users service for user operations\n   * @memberof AuthService\n   */\n  constructor(\n    @Inject(forwardRef(() => UsersService)) // Use forwardRef to avoid circular dependency\n    private readonly usersService: UsersService, // Assuming UsersService is imported from the correct path\n  ) {}\n\n  /**\n   * Authenticates a user with username and password.\n   *\n   * This method validates user credentials and returns authentication status.\n   * It retrieves user information from the UsersService and validates the\n   * provided credentials against stored user data.\n   *\n   * @param {string} username - The username for authentication\n   * @param {string} password - The password for authentication\n   * @param {string} [userId] - Optional user ID for additional validation\n   * @returns {string} Authentication result message\n   * @memberof AuthService\n   * @example\n   * const result = authService.login('john_doe', 'password123', '1');\n   * // Returns: \"Logged in successfully\"\n   */\n  public login(username: string, password: string, userId?: string) {\n    let user = this.usersService.getUserById({\n      id: Number(userId),\n    });\n    return 'Logged in successfully'; // Placeholder for login logic\n  }\n\n  /**\n   * Checks if the current user is authenticated.\n   *\n   * This method verifies the authentication status of the current session\n   * and returns a boolean indicating whether the user is authenticated.\n   *\n   * @returns {boolean} True if user is authenticated, false otherwise\n   * @memberof AuthService\n   * @example\n   * const isAuthenticated = authService.isAuth();\n   * // Returns: false (placeholder implementation)\n   */\n  public isAuth() {\n    return false; // Placeholder for authentication check logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@MinLength(4)@MaxLength(1024)@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Meta options for the post', type: CreatePostMetaOptionDto, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postTypes, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsEnum(postTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(256)@MinLength(4)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  Min,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nimport { Type } from 'class-transformer';\nimport { postTypes } from '../enums/post-types.enum';\nimport { postStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionDto } from 'src/meta-options/dtos/create-post-meta-option.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postTypes,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(postTypes)\n  @IsNotEmpty()\n  postType: postTypes;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @MinLength(4)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @MinLength(4)\n  @MaxLength(1024)\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    description: 'Meta options for the post',\n    type: CreatePostMetaOptionDto,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnabled\": true,}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionDto)\n  metaOptions?: CreatePostMetaOptionDto | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionDto.html":{"url":"classes/CreatePostMetaOptionDto.html","title":"class - CreatePostMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-option.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The JSON value for the meta option', example: '{\"key\": \"value\"}', type: String})@IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-option.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionDto {\n  @ApiProperty({\n    description: 'The JSON value for the meta option',\n    example: '{\"key\": \"value\"}',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Optional description for the tag', example: 'Posts related to technology topics', type: String, required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL of the featured image for the tag', example: 'https://example.com/image.jpg', type: String, required: false})@IsOptional()@IsString()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology', type: String})@IsString()@MinLength(3)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'JSON schema for the tag', example: '{\"type\": \"object\", \"properties\": {\"key\": {\"type\": \"string\"}}}', type: String, required: false})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique slug for the tag', example: 'technology', type: String})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be lowercase and can only contain letters, numbers, and hyphens.'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n    type: String,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty({\n    description: 'The unique slug for the tag',\n    example: 'technology',\n    type: String,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug must be lowercase and can only contain letters, numbers, and hyphens.',\n  })\n  @MaxLength(256)\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'Optional description for the tag',\n    example: 'Posts related to technology topics',\n    type: String,\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({\n    description: 'JSON schema for the tag',\n    example: '{\"type\": \"object\", \"properties\": {\"key\": {\"type\": \"string\"}}}',\n    type: String,\n    required: false,\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'URL of the featured image for the tag',\n    example: 'https://example.com/image.jpg',\n    type: String,\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new user.\nThis DTO defines the structure and validation rules for user creation\nrequests. It includes comprehensive validation for user data including\nname constraints, email format validation, and secure password requirements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:93\n                        \n                    \n\n            \n                \n                    The user's email address.\nMust be a valid email format and is required for account creation.\nUsed for user authentication and communication.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    The user's first name.\nMust be a string between 3 and 96 characters long.\nThis field is required for user identification and personalization.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:52\n                        \n                    \n\n            \n                \n                    The user's last name.\nOptional string field between 3 and 96 characters long.\nProvides additional user identification information.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,}$/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one symbol.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:78\n                        \n                    \n\n            \n                \n                    The user's password.\nMust be a secure password between 8 and 128 characters containing:\n\nAt least one uppercase letter\nAt least one lowercase letter\nAt least one number\nAt least one special character (@$!%*?&)\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  MinLength,\n  MaxLength,\n  IsEmail,\n  Matches,\n} from 'class-validator';\n\n/**\n * Data Transfer Object for creating a new user.\n *\n * This DTO defines the structure and validation rules for user creation\n * requests. It includes comprehensive validation for user data including\n * name constraints, email format validation, and secure password requirements.\n *\n * @class CreateUserDto\n * @description Validates and structures user creation data\n */\nexport class CreateUserDto {\n  /**\n   * The user's first name.\n   *\n   * Must be a string between 3 and 96 characters long.\n   * This field is required for user identification and personalization.\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"John\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * The user's last name.\n   *\n   * Optional string field between 3 and 96 characters long.\n   * Provides additional user identification information.\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName: string;\n\n  /**\n   * The user's password.\n   *\n   * Must be a secure password between 8 and 128 characters containing:\n   * - At least one uppercase letter\n   * - At least one lowercase letter\n   * - At least one number\n   * - At least one special character (@$!%*?&)\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"SecurePass123!\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'Password must contain at least one uppercase letter, one lowercase letter, one number, and one symbol.',\n    },\n  )\n  password: string;\n\n  /**\n   * The user's email address.\n   *\n   * Must be a valid email format and is required for account creation.\n   * Used for user authentication and communication.\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"john.doe@example.com\"\n   */\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-params.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for user retrieval parameters.\nThis DTO defines the structure and validation rules for user query\nparameters, specifically for retrieving users by their unique identifier.\nIt provides optional filtering capabilities for user lookup operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-params.dto.ts:29\n                        \n                    \n\n            \n                \n                    Optional user identifier for specific user retrieval.\nWhen provided, this ID is used to fetch a specific user.\nIf omitted, the request may return multiple users based on other criteria.\nThe value is automatically transformed from string to number.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsNumber, IsOptional } from 'class-validator';\n\n/**\n * Data Transfer Object for user retrieval parameters.\n *\n * This DTO defines the structure and validation rules for user query\n * parameters, specifically for retrieving users by their unique identifier.\n * It provides optional filtering capabilities for user lookup operations.\n *\n * @class GetUserParamsDto\n * @description Validates and structures user query parameters\n */\nexport class GetUserParamsDto {\n  /**\n   * Optional user identifier for specific user retrieval.\n   *\n   * When provided, this ID is used to fetch a specific user.\n   * If omitted, the request may return multiple users based on other criteria.\n   * The value is automatically transformed from string to number.\n   *\n   * @type {number}\n   * @memberof GetUserParamsDto\n   * @example 1234\n   */\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createMetaOption: CreatePostMetaOptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new meta option', description: 'Creates a new meta option for posts with the provided data.'})@ApiResponse({status: 201, description: 'Meta option created successfully.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOption\n                                            \n                                                            CreatePostMetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './services/meta-options.service';\nimport { CreatePostMetaOptionDto } from './dtos/create-post-meta-option.dto';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('meta-options')\n@ApiTags('Meta Options') // Use ApiTags to group the controller in Swagger documentation\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  @ApiOperation({\n    summary: 'Create a new meta option',\n    description: 'Creates a new meta option for posts with the provided data.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Meta option created successfully.',\n  })\n  @Post()\n  public createMetaOption(@Body() createMetaOption: CreatePostMetaOptionDto) {\n    return this.metaOptionsService.createMetaOption(createMetaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-options.entity';\nimport { MetaOptionsService } from './services/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [\n    TypeOrmModule.forFeature([MetaOption]), // Add your MetaOptions entity here when created\n  ],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/services/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/services/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createMetaOptionDto: CreatePostMetaOptionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/services/meta-options.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-options.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionDto } from '../dtos/create-post-meta-option.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaOption)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async createMetaOption(createMetaOptionDto: CreatePostMetaOptionDto) {\n    let newMetaOptions = this.metaOptionsRepository.create(createMetaOptionDto);\n    newMetaOptions = await this.metaOptionsRepository.save(newMetaOptions);\n    return newMetaOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty()\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Posts.html":{"url":"entities/Posts.html","title":"entity - Posts","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Posts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                publishOn\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {nullable: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postTypes, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', array: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { postTypes } from './enums/post-types.enum';\nimport { postStatus } from './enums/post-status.enum';\nimport { MetaOption } from 'src/meta-options/meta-options.entity';\n\n@Entity()\nexport class Posts {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: postTypes,\n    nullable: false,\n  })\n  postType: postTypes;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    unique: true,\n    nullable: false,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: postStatus,\n    nullable: false,\n  })\n  status: postStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n    default: '',\n  })\n  content: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 128,\n    nullable: true,\n  })\n  featuredImageUrl: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishOn: Date;\n\n  @Column({\n    type: 'text',\n    array: true,\n    nullable: true,\n  })\n  tags: string[];\n\n  @OneToOne(() => MetaOption, { nullable: true })\n  @JoinColumn()\n  metaOptions: MetaOption | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Posts controller that handles HTTP requests related to post management.\nThis controller provides RESTful endpoints for post operations including\ncreating, reading, and updating posts. It supports user-specific post\nretrieval and comprehensive post management with proper validation\nand API documentation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 201, description: 'Post created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Creates a new post in the system.\nThis endpoint accepts post data through the request body and creates\na new post with proper validation, content processing, and metadata\nmanagement including slug generation and content categorization.\nExample :POST /posts\nBody: {\n  \"title\": \"Understanding NestJS\",\n  \"content\": \"NestJS is a powerful framework...\",\n  \"postType\": \"POST\"\n}\n// Returns: { id: 789, title: \"Understanding NestJS\", ... }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPost data for creating new content\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post object with generated metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'List of posts for the user'})@Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis endpoint returns a list of all posts associated with the specified\nuser ID. It provides user-specific content filtering and supports\ncomprehensive post data retrieval.\nExample :GET /posts/123\n// Returns: [{ user: {...}, content: \"...\", createdAt: \"...\", id: 456 }]\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique identifier of the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Array of post objects for the specified user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update an existing post', description: 'This endpoint allows you to update an existing post by providing the post ID and the fields to update.'})@ApiResponse({status: 201, description: 'Post updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:113\n                        \n                    \n\n\n            \n                \n                        Updates an existing post with new information.\nThis endpoint allows partial updates to post content and metadata\nusing the PATCH method. It supports updating various post attributes\nwhile maintaining data integrity and content validation.\nExample :PATCH /posts\nBody: {\n  \"title\": \"Updated Post Title\",\n  \"content\": \"Updated content...\"\n}\n// Returns: \"This method is not implemented yet\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPartial post data for updates\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Update status message\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './services/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n/**\n * Posts controller that handles HTTP requests related to post management.\n *\n * This controller provides RESTful endpoints for post operations including\n * creating, reading, and updating posts. It supports user-specific post\n * retrieval and comprehensive post management with proper validation\n * and API documentation.\n *\n * @controller PostsController\n * @description Handles post-related HTTP requests and operations\n */\n@Controller('posts')\n@ApiTags('Posts') // Use ApiTags to group the controller in Swagger documentation\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   *\n   * @param {PostsService} postsService - The injected posts service\n   * @memberof PostsController\n   */\n  constructor(\n    // Inject any required services here, e.g., PostsService\n    private readonly postsService: PostsService,\n  ) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This endpoint returns a list of all posts associated with the specified\n   * user ID. It provides user-specific content filtering and supports\n   * comprehensive post data retrieval.\n   *\n   * @param {string} userId - The unique identifier of the user\n   * @returns {object[]} Array of post objects for the specified user\n   * @memberof PostsController\n   * @example\n   * GET /posts/123\n   * // Returns: [{ user: {...}, content: \"...\", createdAt: \"...\", id: 456 }]\n   */\n  @ApiResponse({\n    status: 200,\n    description: 'List of posts for the user',\n  })\n  @Get('/:userId')\n  public getPosts(\n    @Param('userId') userId: string, // Use Param decorator to get userId from the route\n  ) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new post in the system.\n   *\n   * This endpoint accepts post data through the request body and creates\n   * a new post with proper validation, content processing, and metadata\n   * management including slug generation and content categorization.\n   *\n   * @param {CreatePostDto} createPostDto - Post data for creating new content\n   * @returns {object} The created post object with generated metadata\n   * @memberof PostsController\n   * @example\n   * POST /posts\n   * Body: {\n   *   \"title\": \"Understanding NestJS\",\n   *   \"content\": \"NestJS is a powerful framework...\",\n   *   \"postType\": \"POST\"\n   * }\n   * // Returns: { id: 789, title: \"Understanding NestJS\", ... }\n   */\n  @ApiResponse({\n    status: 201,\n    description: 'Post created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.createPost(createPostDto);\n  }\n\n  /**\n   * Updates an existing post with new information.\n   *\n   * This endpoint allows partial updates to post content and metadata\n   * using the PATCH method. It supports updating various post attributes\n   * while maintaining data integrity and content validation.\n   *\n   * @param {PatchPostDto} patchPostDto - Partial post data for updates\n   * @returns {string} Update status message\n   * @memberof PostsController\n   * @example\n   * PATCH /posts\n   * Body: {\n   *   \"title\": \"Updated Post Title\",\n   *   \"content\": \"Updated content...\"\n   * }\n   * // Returns: \"This method is not implemented yet\"\n   */\n  @ApiOperation({\n    summary: 'Update an existing post',\n    description:\n      'This endpoint allows you to update an existing post by providing the post ID and the fields to update.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Post updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return 'This method is not implemented yet';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Posts module that manages post-related functionality.\nThis module provides comprehensive post management capabilities including\npost creation, retrieval, updates, and post data management. It integrates\nwith the Users module to associate posts with their authors and manage\nuser-specific post operations.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './services/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Posts } from './posts.entity';\nimport { MetaOption } from 'src/meta-options/meta-options.entity';\n\n/**\n * Posts module that manages post-related functionality.\n *\n * This module provides comprehensive post management capabilities including\n * post creation, retrieval, updates, and post data management. It integrates\n * with the Users module to associate posts with their authors and manage\n * user-specific post operations.\n *\n * @module PostsModule\n * @description Manages post-related operations and data\n */\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule, TypeOrmModule.forFeature([Posts, MetaOption])],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/services/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Posts service that provides post-related business logic and data operations.\nThis service handles all post-related operations including post creation,\nretrieval, management, and integration with user services. It provides\nthe core business logic for post operations throughout the application,\nincluding content processing and user association.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/services/posts.service.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of PostsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected users service for user operations\n\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/services/posts.service.ts:113\n                        \n                    \n\n\n            \n                \n                        Creates a new post with the provided data.\nThis method processes the post creation data, validates the content,\nand returns the created post with generated metadata including\nunique identification and creation timestamp.\nExample :const newPost = postsService.createPost({\n  title: \"Understanding NestJS\",\n  content: \"NestJS is a powerful framework...\",\n  postType: \"POST\"\n});\n// Returns: { id: 789, title: \"Understanding NestJS\", ... }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe post data for creation\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created post object with generated metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/services/posts.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis method fetches all posts associated with the specified user ID,\nincluding user information and post metadata. It generates simulated\npost data with user context and temporal information.\nExample :const posts = postsService.findAll('123');\n// Returns: [\n//   {\n//     user: { id: 1231, firstName: \"John\", ... },\n//     content: \"This is a post content for user 123\",\n//     createdAt: \"2023-06-13T...\",\n//     id: 456\n//   }\n// ]\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique identifier of the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of post objects with user and content information\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/services/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Posts } from '../posts.entity';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from 'src/meta-options/meta-options.entity';\n\n/**\n * Posts service that provides post-related business logic and data operations.\n *\n * This service handles all post-related operations including post creation,\n * retrieval, management, and integration with user services. It provides\n * the core business logic for post operations throughout the application,\n * including content processing and user association.\n *\n * @service PostsService\n * @description Provides post management and data operations\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Creates an instance of PostsService.\n   *\n   * @param {UsersService} usersService - The injected users service for user operations\n   * @memberof PostsService\n   */\n  constructor(\n    // Post repository\n\n    private readonly usersService: UsersService, // Inject UsersService if needed\n\n    @InjectRepository(Posts)\n    private postsRepository: Repository, // Inject the Posts repository for database operations\n\n    @InjectRepository(MetaOption)\n    private metaOptionRepository: Repository, // Inject the MetaOption repository for metadata operations\n  ) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   *\n   * This method fetches all posts associated with the specified user ID,\n   * including user information and post metadata. It generates simulated\n   * post data with user context and temporal information.\n   *\n   * @param {string} userId - The unique identifier of the user\n   * @returns {object[]} Array of post objects with user and content information\n   * @memberof PostsService\n   * @example\n   * const posts = postsService.findAll('123');\n   * // Returns: [\n   * //   {\n   * //     user: { id: 1231, firstName: \"John\", ... },\n   * //     content: \"This is a post content for user 123\",\n   * //     createdAt: \"2023-06-13T...\",\n   * //     id: 456\n   * //   }\n   * // ]\n   */\n  public findAll(userId: string) {\n    const user = this.usersService.getUserById({ id: Number(userId) });\n    return [\n      {\n        user: user,\n        content: 'This is a post content for user ' + userId,\n        createdAt: new Date().toISOString(),\n        id: Math.floor(Math.random() * 1000), // Simulating a post ID\n      },\n      {\n        user: user,\n        content: 'This is another post content for user ' + userId,\n        createdAt: new Date().toISOString(),\n        id: Math.floor(Math.random() * 1000) + 1, // Simulating another post ID\n      },\n    ];\n  }\n\n  /**\n   * Creates a new post with the provided data.\n   *\n   * This method processes the post creation data, validates the content,\n   * and returns the created post with generated metadata including\n   * unique identification and creation timestamp.\n   *\n   * @param {CreatePostDto} createPostDto - The post data for creation\n   * @returns {object} The created post object with generated metadata\n   * @memberof PostsService\n   * @example\n   * const newPost = postsService.createPost({\n   *   title: \"Understanding NestJS\",\n   *   content: \"NestJS is a powerful framework...\",\n   *   postType: \"POST\"\n   * });\n   * // Returns: { id: 789, title: \"Understanding NestJS\", ... }\n   */\n  // public async createPost(createPostDto: CreatePostDto) {\n  //   // Check if the post already exists\n  //   const existingPost = await this.postsRepository.findOne({\n  //     where: { slug: createPostDto.slug },\n  //   });\n\n  //   if (existingPost) {\n  //     throw new Error('Post already exists with this slug');\n  //   }\n\n  //   let newPost = this.postsRepository.create(createPostDto);\n  //   newPost = await this.postsRepository.save(newPost);\n\n  //   return newPost;\n  // }\n\n  public async createPost(@Body() createPostDto: CreatePostDto) {\n    let metaOptions = createPostDto.metaOptions\n      ? this.metaOptionRepository.create(createPostDto.metaOptions)\n      : null;\n\n    let post = this.postsRepository.create(createPostDto);\n\n    if (metaOptions) {\n      post.metaOptions = await this.metaOptionRepository.save(metaOptions);\n    }\n\n    return await this.postsRepository.save(post);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true, // Ensures tag name is unique\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true, // Ensures email is unique\n    nullable: false,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true, // Optional field\n  })\n  description?: string;\n\n  @Column({\n    type: 'text',\n    default: true, // Default value if not provided\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true, // Optional field\n  })\n  featuredImage?: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('tags')\nexport class TagsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tags.entity';\n\n@Module({\n  controllers: [TagsController],\n  imports: [\n    TypeOrmModule.forFeature([Tag]), // Add your Tag entity here when created\n  ],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true, // Optional field\n    default: null, // Default value if not provided\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    unique: true, // Ensures email is unique\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users controller that handles HTTP requests related to user management.\nThis controller provides RESTful endpoints for user operations including\ncreating, reading, updating users. It supports pagination, filtering,\nand individual user retrieval with comprehensive validation and documentation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:120\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the system.\nThis endpoint accepts user data through the request body and creates\na new user account with proper validation and data integrity checks.\nExample :POST /users\nBody: {\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n```html\n  \"password\": \"SecurePass123!\"\n}\n// Returns: \"This action creates a new user\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data for creating new account\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Success message confirming user creation\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/{:id}')@ApiOperation({summary: 'Get user by ID', description: 'Fetch a user by their unique identifier.'})@ApiResponse({status: 200, description: 'The user has been successfully retrieved.', type: CreateUserDto})@ApiQuery({name: 'id', required: false, description: 'The unique identifier of the user', type: 'number', example: 1234})@ApiQuery({name: 'limit', required: false, description: 'The maximum number of users to return', type: 'number', example: 10})@ApiQuery({name: 'page', required: false, description: 'The page number for pagination', type: 'number', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        Retrieves users with optional filtering and pagination.\nThis endpoint can return either a specific user by ID or a paginated list\nof all users. It supports query parameters for pagination control and\npath parameters for specific user retrieval.\nExample :GET /users/123?limit=5&page=1\n// Returns specific user with ID 123GET /users?limit=10&page=2\n// Returns paginated list of users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPath parameters including optional user ID\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to return (default: 10)\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination (default: 1)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Single user object or array of users\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:142\n                        \n                    \n\n\n            \n                \n                        Updates an existing user's information.\nThis endpoint allows partial updates to user information using\nthe PATCH method. Only provided fields will be updated while\nmaintaining data integrity and validation.\nExample :PATCH /users\nBody: {\n  \"firstName\": \"Jane\"\n}\n// Returns: { \"firstName\": \"Jane\" }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPartial user data for updates\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                The updated user data\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUserParamsDto } from './dtos/get-user-params.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './services/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n/**\n * Users controller that handles HTTP requests related to user management.\n *\n * This controller provides RESTful endpoints for user operations including\n * creating, reading, updating users. It supports pagination, filtering,\n * and individual user retrieval with comprehensive validation and documentation.\n *\n * @controller UsersController\n * @description Handles user-related HTTP requests and operations\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Creates an instance of UsersController.\n   *\n   * @param {UsersService} usersService - The injected users service\n   * @memberof UsersController\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves users with optional filtering and pagination.\n   *\n   * This endpoint can return either a specific user by ID or a paginated list\n   * of all users. It supports query parameters for pagination control and\n   * path parameters for specific user retrieval.\n   *\n   * @param {GetUserParamsDto} getUserParamsDto - Path parameters including optional user ID\n   * @param {number} limit - Maximum number of users to return (default: 10)\n   * @param {number} page - Page number for pagination (default: 1)\n   * @returns {object|object[]} Single user object or array of users\n   * @memberof UsersController\n   * @example\n   * GET /users/123?limit=5&page=1\n   * // Returns specific user with ID 123\n   *\n   * GET /users?limit=10&page=2\n   * // Returns paginated list of users\n   */\n  @Get('/{:id}')\n  @ApiOperation({\n    summary: 'Get user by ID',\n    description: 'Fetch a user by their unique identifier.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user has been successfully retrieved.',\n    type: CreateUserDto, // Assuming CreateUserDto is used for the response\n  })\n  @ApiQuery({\n    name: 'id',\n    required: false,\n    description: 'The unique identifier of the user',\n    type: 'number',\n    example: 1234,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    description: 'The maximum number of users to return',\n    type: 'number',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    description: 'The page number for pagination',\n    type: 'number',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamsDto: GetUserParamsDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    if (getUserParamsDto.id) {\n      return this.usersService.getUserById(getUserParamsDto);\n    }\n    return this.usersService.getUsers(getUserParamsDto, limit, page);\n  }\n\n  /**\n   * Creates a new user in the system.\n   *\n   * This endpoint accepts user data through the request body and creates\n   * a new user account with proper validation and data integrity checks.\n   *\n   * @param {CreateUserDto} createUserDto - User data for creating new account\n   * @returns {string} Success message confirming user creation\n   * @memberof UsersController\n   * @example\n   * POST /users\n   * Body: {\n   *   \"firstName\": \"John\",\n   *   \"lastName\": \"Doe\",\n   *   \"email\": \"john@example.com\",\n   *   \"password\": \"SecurePass123!\"\n   * }\n   * // Returns: \"This action creates a new user\"\n   */\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  /**\n   * Updates an existing user's information.\n   *\n   * This endpoint allows partial updates to user information using\n   * the PATCH method. Only provided fields will be updated while\n   * maintaining data integrity and validation.\n   *\n   * @param {PatchUserDto} patchUserDto - Partial user data for updates\n   * @returns {PatchUserDto} The updated user data\n   * @memberof UsersController\n   * @example\n   * PATCH /users\n   * Body: {\n   *   \"firstName\": \"Jane\"\n   * }\n   * // Returns: { \"firstName\": \"Jane\" }\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Users module that manages user-related functionality.\nThis module provides comprehensive user management capabilities including\nuser creation, retrieval, updates, and user data management. It integrates\nwith the Authentication module to provide secure user operations.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './services/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n/**\n * Users module that manages user-related functionality.\n *\n * This module provides comprehensive user management capabilities including\n * user creation, retrieval, updates, and user data management. It integrates\n * with the Authentication module to provide secure user operations.\n *\n * @module UsersModule\n * @description Manages user-related operations and data\n */\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService], // Export UsersService if needed in other modules\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]), // Import User entity for TypeORM\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/services/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users service that provides user-related business logic and data operations.\nThis service handles all user-related operations including user retrieval,\nuser management, and integration with authentication services. It provides\nthe core business logic for user operations throughout the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                getUserById\n                            \n                            \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/services/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of UsersService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected authentication service\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/services/users.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the system.\nThis method checks if a user with the provided email already exists,\nand if not, creates a new user with the provided details.\nExample :const newUser = await usersService.createUser({\n firstName: 'Alice',\nlastName: 'Smith',\nemail: 'aloce@sfafa.com',\npassword: 'password@123',\n});\n// Returns: { id: 1, firstName: \"Alice\", lastName: \"Smith\", email: \"aloce@sfafa.com\", ... }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData transfer object containing user details\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The newly created user object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(getUserParamsDto: GetUserParamsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/services/users.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific user by their unique identifier.\nThis method fetches user information based on the provided user ID\nand returns detailed user data including personal information and\ncontact details.\nExample :const user = usersService.getUserById({ id: 1231 });\n// Returns: { id: 1231, firstName: \"John\", lastName: \"Doe\", email: \"john@hao.com\" }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters containing the user ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; lastName: string; email: string; }\n\n                        \n                            \n                                User object with detailed information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/services/users.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of users with optional filtering.\nThis method returns a list of users based on the provided parameters,\nwith support for pagination and authentication checks. It verifies\nuser authorization before returning sensitive user data.\nExample :const users = usersService.getUsers({}, 10, 1);\n// Returns: [{ firstName: \"John\", lastName: \"Doe\", email: \"johndoe@fo.com\" }, ...]\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for user filtering\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to return\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of user objects\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUserParamsDto } from '../dtos/get-user-params.dto';\nimport { AuthService } from 'src/auth/services/auth.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n/**\n * Users service that provides user-related business logic and data operations.\n *\n * This service handles all user-related operations including user retrieval,\n * user management, and integration with authentication services. It provides\n * the core business logic for user operations throughout the application.\n *\n * @service UsersService\n * @description Provides user management and data operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Creates an instance of UsersService.\n   *\n   * @param {AuthService} authService - The injected authentication service\n   * @memberof UsersService\n   */\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @Inject(forwardRef(() => AuthService)) // Use forwardRef to avoid circular dependency issues\n    private readonly authService: AuthService, // Assuming AuthService is imported from the correct path\n  ) {}\n\n  /**\n   * Retrieves a paginated list of users with optional filtering.\n   *\n   * This method returns a list of users based on the provided parameters,\n   * with support for pagination and authentication checks. It verifies\n   * user authorization before returning sensitive user data.\n   *\n   * @param {GetUserParamsDto} getUserParamsDto - Parameters for user filtering\n   * @param {number} limit - Maximum number of users to return\n   * @param {number} page - Page number for pagination\n   * @returns {object[]} Array of user objects\n   * @throws {Error} When user is not authenticated\n   * @memberof UsersService\n   * @example\n   * const users = usersService.getUsers({}, 10, 1);\n   * // Returns: [{ firstName: \"John\", lastName: \"Doe\", email: \"johndoe@fo.com\" }, ...]\n   */\n  public getUsers(\n    getUserParamsDto: GetUserParamsDto,\n    limit: number,\n    page: number,\n  ) {\n    console.log('GetUserParamsDto:', getUserParamsDto);\n    console.log('Limit:', limit);\n    console.log('Page:', page);\n\n    if (this.authService.isAuth()) {\n      return [\n        {\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'johndoe@fo.com',\n        },\n        {\n          firstName: 'Jane',\n          lastName: 'Doe',\n          email: 'janeDoe@gp.com',\n        },\n      ];\n    }\n    throw new Error('Unauthorized access');\n  }\n\n  /**\n   * Retrieves a specific user by their unique identifier.\n   *\n   * This method fetches user information based on the provided user ID\n   * and returns detailed user data including personal information and\n   * contact details.\n   *\n   * @param {GetUserParamsDto} getUserParamsDto - Parameters containing the user ID\n   * @returns {object} User object with detailed information\n   * @memberof UsersService\n   * @example\n   * const user = usersService.getUserById({ id: 1231 });\n   * // Returns: { id: 1231, firstName: \"John\", lastName: \"Doe\", email: \"john@hao.com\" }\n   */\n  public getUserById(getUserParamsDto: GetUserParamsDto) {\n    const { id } = getUserParamsDto;\n    console.log('Get user by ID:', id);\n    return {\n      id: 1231,\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john@hao.com',\n    };\n  }\n\n  /**\n   * Creates a new user in the system.\n   * This method checks if a user with the provided email already exists,\n   * and if not, creates a new user with the provided details.\n   * @param {CreateUserDto} createUserDto - Data transfer object containing user details\n   * @return {Promise} The newly created user object\n   * @throws {Error} If a user with the provided email already exists\n   * @memberof UsersService\n   * @example\n   * const newUser = await usersService.createUser({\n   *  firstName: 'Alice',\n   * lastName: 'Smith',\n   * email: 'aloce@sfafa.com',\n   * password: 'password@123',\n   * });\n   * // Returns: { id: 1, firstName: \"Alice\", lastName: \"Smith\", email: \"aloce@sfafa.com\", ... }\n   * */\n\n  public async createUser(createUserDto: CreateUserDto) {\n    // Check if the user already exists\n    let existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new Error('User already exists with this email');\n    }\n\n    // Create a new user instance\n    let newUser = this.usersRepository.create(createUserDto);\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-option.dto.ts\n            \n            class\n            CreatePostMetaOptionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/services/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/posts/posts.entity.ts\n            \n            entity\n            Posts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/services/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-params.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.16.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.24\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            postTypes   (src/.../post-types.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n            \n        \n\n    src/posts/enums/post-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function that initializes and configures the NestJS application.\nThis function serves as the entry point for the application, setting up:\n\nGlobal validation pipes for request validation\nSwagger/OpenAPI documentation\nServer configuration and startup\n\nThe application includes comprehensive validation, API documentation,\nand proper error handling for production-ready deployment.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
