var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.12,1,1.894]],["body/controllers/AppController.html",[0,2.071,1,3.428,2,1.166,3,0.447,4,0.39,5,0.39,6,2.607,7,0.6,8,2.647,9,0.957,10,2.172,11,3.984,12,3.498,13,3.33,14,2.798,15,1.056,16,4.219,17,2.987,18,3.193,19,2.356,20,3.011,21,3.011,22,4.238,23,4.238,24,1.907,25,4.238,26,0.638,27,1.907,28,4.219,29,1.286,30,0.039,31,0.87,32,3.158,33,2.47,34,3.011,35,4.219,36,2.301,37,3.498,38,4.238,39,4.238,40,3.498,41,1.168,42,3.498,43,3.498,44,1.454,45,0.6,46,0.787,47,2.66,48,2.607,49,0.571,50,0.856,51,0.447,52,0.507,53,0.447,54,0.059,55,1.421,56,1.421,57,1.421,58,1.421,59,1.286,60,1.288,61,2.244,62,1.421,63,1.286,64,3.158,65,0.026,66,0.026]],["title/modules/AppModule.html",[67,1.12,68,1.894]],["body/modules/AppModule.html",[1,3.048,2,1.608,3,0.466,4,0.406,5,0.406,7,0.616,8,2.053,9,0.951,11,3.092,19,2.42,20,3.092,21,3.092,24,1.959,30,0.039,45,0.786,46,0.819,47,2.77,48,2.714,49,0.594,50,0.879,51,0.466,52,0.834,53,0.466,54,0.062,65,0.027,66,0.027,67,2.149,68,3.746,69,2.196,70,1.48,71,1.828,72,1.828,73,1.48,74,2.713,75,1.828,76,2.714,77,2.714,78,2.714,79,2.77,80,3.087,81,2.499,82,2.42,83,1.828,84,1.64,85,3.287,86,4.353,87,4.353,88,4.353,89,3.244,90,4.353,91,1.459,92,1.459,93,2.719,94,1.959,95,2.719,96,2.719,97,2.719,98,3.092,99,4.353,100,4.353,101,3.287,102,3.287,103,3.287,104,3.287,105,2.714]],["title/injectables/AppService.html",[47,1.513,106,1.12]],["body/injectables/AppService.html",[3,0.464,4,0.405,5,0.405,7,0.615,8,2.712,9,0.923,11,3.085,12,3.584,15,1.382,16,4.455,19,2.884,24,2.335,26,0.662,27,1.954,28,4.281,30,0.039,31,0.903,33,2.496,34,3.941,35,4.281,36,2.496,37,3.584,40,3.584,41,1.197,42,4.021,43,4.021,44,1.481,45,0.464,46,0.817,47,2.588,49,0.592,50,0.877,51,0.464,52,0.526,53,0.464,54,0.062,59,2.34,60,0.996,63,1.334,65,0.027,66,0.027,96,3.043,106,1.604,107,1.822,108,2.704,109,2.712,110,2.884,111,4.342,112,3.584,113,4.342,114,1.632,115,3.584,116,4.342,117,3.276,118,2.167,119,4.342,120,3.085,121,4.342,122,4.342,123,3.584,124,2.712,125,4.342]],["title/controllers/AuthController.html",[0,1.12,126,1.894]],["body/controllers/AuthController.html",[0,2.133,2,1.317,3,0.505,4,0.441,5,0.441,7,0.65,9,0.573,10,2.068,13,3.171,14,2.533,15,1.144,17,2.867,30,0.039,45,0.719,46,0.889,49,0.644,50,0.928,51,0.505,52,0.573,53,0.505,54,0.067,55,1.605,56,1.605,57,1.605,58,1.605,59,1.453,60,1.084,61,2.534,62,1.605,65,0.028,66,0.028,94,2.716,109,2.867,110,2.553,114,1.538,126,3.464,127,2.944,128,2.534,129,3.567,130,2.285,131,1.477,132,4.59,133,3.262,134,3.789,135,2.553,136,2.553,137,2.553,138,2.599,139,4.59,140,2.944,141,3.262,142,1.605,143,3.567,144,3.567,145,2.228,146,2.944,147,2.944,148,1.78]],["title/modules/AuthModule.html",[67,1.12,79,1.513]],["body/modules/AuthModule.html",[2,1.644,3,0.482,4,0.421,5,0.421,7,0.63,9,0.546,10,1.813,15,1.11,24,1.531,30,0.038,45,0.774,46,0.848,49,0.615,50,0.9,51,0.482,52,0.546,53,0.63,54,0.064,65,0.027,66,0.027,67,2.183,69,2.004,70,1.531,71,1.892,72,1.892,73,1.531,74,2.76,75,2.76,79,2.89,81,2.234,82,2.476,83,1.892,84,1.698,89,2.125,91,1.492,92,1.492,94,2.637,126,3.1,131,1.545,133,3.163,134,3.675,136,2.476,137,2.476,138,2.712,140,2.809,149,2.809,150,2.809,151,2.809,152,3.402,153,3.882,154,2.781,155,3.675,156,3.675,157,3.675,158,3.675,159,3.1,160,3.402,161,2.809,162,2.417,163,3.163]],["title/injectables/AuthService.html",[106,1.12,138,1.365]],["body/injectables/AuthService.html",[3,0.321,4,0.28,5,0.28,7,0.624,9,0.364,10,1.366,15,0.995,18,1.416,24,1.02,26,0.458,27,1.509,30,0.039,31,1.1,33,2.513,36,1.509,41,1.215,44,1.73,45,0.475,46,0.565,49,0.41,50,0.678,51,0.321,52,0.364,53,0.321,54,0.043,55,1.509,56,1.509,57,1.985,58,1.509,59,2.077,60,1.213,62,1.02,63,1.366,65,0.021,66,0.021,91,1.124,92,1.124,94,2.629,98,1.611,106,1.238,107,1.261,110,2.452,114,1.478,118,2.2,120,1.611,124,2.755,131,1.653,133,3.344,135,2.452,136,2.452,137,1.865,138,2.356,145,1.416,153,3.344,155,2.768,156,4.067,159,2.095,164,1.871,165,1.985,166,4.41,167,1.366,168,2.318,169,3.353,170,1.796,171,2.74,172,4.41,173,2.095,174,1.871,175,2.267,176,1.673,177,1.673,178,1.02,179,1.796,180,2.267,181,4.41,182,4.067,183,2.768,184,4.41,185,2.768,186,2.768,187,3.353,188,3.353,189,3.344,190,4.41,191,3.353,192,2.768,193,3.353,194,3.353,195,3.719,196,3.133,197,2.267,198,3.353,199,4.927,200,2.452,201,1.865,202,1.865,203,3.353,204,3.353,205,1.124,206,4.41,207,3.353,208,3.353,209,2.095,210,3.991,211,2.835,212,2.267,213,1.796,214,2.382,215,1.416,216,1.871,217,1.871,218,1.871,219,1.871,220,1.416,221,1.611,222,1.871,223,1.871,224,1.871,225,1.871]],["title/classes/CreatePostDto.html",[54,0.057,226,1.513]],["body/classes/CreatePostDto.html",[3,0.18,4,0.157,5,0.157,7,0.681,8,1.327,9,0.204,14,1.06,19,1.182,26,0.257,29,1.865,30,0.039,31,1.262,36,0.956,41,1.611,44,1.664,45,0.544,49,0.23,50,0.429,51,0.387,52,0.713,53,0.18,54,0.06,60,1.392,65,0.013,66,0.013,92,0.712,95,1.996,97,1.327,112,1.754,115,1.754,135,2.266,142,0.573,158,1.754,165,1.438,167,0.518,170,0.866,178,1.724,179,2.214,185,1.754,186,1.754,189,0.904,192,2.638,200,0.708,205,1.191,214,1.51,226,2.448,227,0.573,228,3.341,229,0.904,230,1.51,231,0.956,232,1.996,233,0.956,234,2.475,235,1.327,236,1.599,237,1.51,238,1.773,239,1.51,240,3.957,241,2.399,242,2.638,243,2.125,244,1.327,245,3.195,246,1.754,247,4.703,248,4.271,249,2.125,250,3.195,251,2.895,252,4.271,253,0.956,254,2.736,255,2.736,256,1.944,257,2.736,258,4.075,259,3.663,260,2.895,261,3.84,262,2.933,263,2.736,264,1.272,265,1.272,266,1.51,267,3.17,268,1.51,269,1.51,270,2.125,271,2.125,272,2.125,273,3.84,274,4.271,275,1.272,276,1.272,277,2.125,278,2.125,279,1.754,280,2.638,281,2.399,282,2.125,283,1.272,284,1.272,285,1.272,286,3.17,287,2.135,288,3.153,289,2.772,290,2.125,291,3.195,292,0.956,293,3.17,294,2.638,295,3.84,296,1.272,297,1.272,298,2.125,299,1.327,300,2.125,301,2.27,302,3.195,303,2.125,304,2.125,305,2.125,306,4.437,307,3.17,308,2.258,309,1.944,310,1.272,311,1.272,312,1.754,313,2.125,314,3.195,315,2.125,316,2.125,317,2.125,318,2.399,319,2.125,320,2.125,321,2.125,322,1.327,323,1.272,324,1.272,325,3.195,326,3.195,327,2.125,328,2.125,329,1.594,330,2.728,331,1.272,332,3.195,333,3.195,334,2.638,335,2.638,336,3.195,337,3.195,338,3.195,339,1.272,340,3.195,341,3.195,342,2.125,343,1.51,344,3.17,345,1.272,346,1.272,347,2.125,348,1.754,349,1.754,350,2.125,351,2.125,352,2.125,353,2.125,354,2.27,355,1.272,356,1.272,357,3.84,358,1.272,359,2.125,360,2.125,361,1.754,362,2.638,363,2.638,364,2.125,365,1.272,366,1.272,367,1.754,368,0.956,369,2.125,370,2.125,371,2.525,372,2.22,373,2.895,374,1.05,375,1.272,376,2.125,377,2.736,378,1.05,379,2.125,380,2.125,381,2.125,382,0.635,383,2.125,384,1.272,385,1.272,386,0.904,387,1.272,388,0.904,389,2.525,390,4.075,391,0.904,392,1.272,393,2.125,394,1.272,395,1.272,396,2.125,397,1.272,398,1.754,399,2.125,400,2.125,401,1.754,402,2.125,403,1.06,404,1.182,405,2.125,406,2.125]],["title/classes/CreatePostMetaOptionDto.html",[54,0.057,281,1.894]],["body/classes/CreatePostMetaOptionDto.html",[3,0.551,4,0.481,5,0.481,7,0.687,26,0.786,29,1.975,30,0.038,31,1.336,41,1.524,44,1.607,45,0.687,51,0.687,53,0.551,54,0.091,65,0.03,66,0.03,142,1.751,178,1.682,227,1.751,228,3.754,234,2.398,251,4.183,253,2.183,281,3.029,288,4.045,289,3.556,294,4.003,371,3.446,372,3.301,382,1.941,389,3.754,403,2.42,404,2.163,407,3.211,408,5.532,409,3.889,410,3.889,411,3.889,412,3.889]],["title/classes/CreateUserDto.html",[54,0.057,413,1.686]],["body/classes/CreateUserDto.html",[3,0.328,4,0.287,5,0.287,7,0.483,9,0.372,14,1.701,15,0.85,26,0.468,29,1.816,30,0.039,31,1.228,36,1.534,41,1.452,44,1.762,45,0.328,49,0.419,50,0.689,51,0.328,52,0.372,53,0.328,54,0.076,60,1.355,65,0.021,66,0.021,91,1.142,94,1.534,95,2.129,97,2.129,131,1.561,165,2.236,170,1.389,177,2.479,178,1.602,179,1.389,195,3.938,200,1.289,205,1.592,214,2.422,227,1.043,230,2.422,231,1.534,232,2.129,233,1.534,235,2.129,236,1.534,237,2.422,238,2.37,239,2.422,253,1.534,267,3.68,268,2.422,279,2.814,280,3.68,318,2.129,322,2.784,334,3.68,335,2.814,343,3.167,361,3.68,362,4.1,363,3.68,371,3.167,372,2.784,373,2.422,374,1.914,378,2.814,382,1.157,391,1.647,398,2.814,403,1.157,404,1.289,413,2.855,414,3.921,415,1.647,416,3.409,417,3.82,418,3.68,419,3.409,420,2.525,421,2.873,422,2.318,423,2.318,424,4.349,425,3.409,426,2.814,427,3.409,428,2.318,429,2.318,430,3.409,431,4.967,432,4.458,433,3.409,434,2.318,435,2.318,436,3.409,437,2.318,438,3.409,439,3.409,440,3.409,441,3.409,442,5.795,443,4.458,444,5.268,445,2.479,446,3.409,447,2.318,448,3.409,449,3.409,450,3.409,451,3.409,452,2.318,453,3.409,454,3.409,455,1.914,456,2.318,457,2.318,458,2.318]],["title/classes/GetUserParamsDto.html",[54,0.057,459,1.686]],["body/classes/GetUserParamsDto.html",[3,0.456,4,0.398,5,0.398,7,0.608,9,0.517,15,1.07,26,0.65,29,1.311,30,0.039,31,0.887,41,1.183,44,1.305,45,0.608,49,0.582,50,0.867,51,0.456,52,0.517,53,0.456,54,0.097,60,0.979,63,1.748,65,0.026,66,0.026,92,1.726,95,2.681,97,2.681,114,1.438,131,1.663,165,1.932,176,2.677,178,1.566,179,2.098,200,1.79,202,2.387,205,1.438,213,2.415,227,1.449,230,3.049,231,1.932,235,2.681,237,3.049,253,1.932,289,2.681,292,2.318,318,2.681,329,2.142,368,2.318,373,3.049,382,1.606,388,2.287,391,2.287,445,3.069,459,2.864,460,3.543,461,2.657,462,2.318,463,3.986,464,4.292,465,4.292,466,2.681,467,3.049,468,4.292,469,3.219,470,3.219,471,3.543,472,4.292,473,2.681,474,4.292,475,3.049,476,4.292,477,4.292,478,4.292,479,4.292,480,2.657]],["title/classes/PatchPostDto.html",[54,0.057,481,1.894]],["body/classes/PatchPostDto.html",[3,0.604,4,0.527,5,0.527,26,0.862,29,1.738,30,0.038,31,1.176,45,0.779,53,0.604,54,0.097,65,0.032,66,0.032,142,1.92,178,1.297,213,2.478,226,2.129,227,1.92,229,3.031,253,2.31,372,3.206,382,2.129,386,3.031,389,3.647,445,2.854,481,3.206,482,4.237,483,4.237,484,5.132,485,4.267,486,4.267,487,3.522,488,5.132,489,3.031]],["title/classes/PatchUserDto.html",[54,0.057,490,1.894]],["body/classes/PatchUserDto.html",[3,0.644,4,0.563,5,0.563,30,0.037,45,0.755,53,0.644,54,0.086,65,0.033,66,0.033,227,2.048,301,3.233,386,3.233,413,2.53,415,3.233,483,4.402,487,3.756,490,3.331,491,3.756,492,5.332,493,3.756,494,3.756]],["title/controllers/PostsController.html",[0,1.12,495,1.894]],["body/controllers/PostsController.html",[0,1.688,2,0.616,3,0.236,4,0.206,5,0.206,7,0.747,9,0.268,10,1.342,13,2.058,14,1.644,15,0.936,17,1.655,26,0.337,27,1.192,29,1.342,30,0.039,31,0.908,33,2.406,36,1.192,41,1.201,44,1.326,45,0.58,46,0.416,49,0.301,50,0.535,51,0.236,52,0.734,53,0.236,54,0.031,55,1.843,56,0.751,57,1.962,58,0.751,59,0.679,60,1.141,62,0.751,63,1.342,65,0.016,66,0.016,91,1.258,93,3.412,114,1.104,118,2.043,128,1.185,130,1.483,131,1.49,135,2.277,141,1.882,142,0.751,145,1.655,146,1.376,147,1.376,148,1.644,154,1.042,165,1.962,167,1.776,170,1.079,171,2.717,173,1.042,176,1.644,177,1.644,178,1.002,179,1.342,196,2.667,201,1.473,205,1.678,211,1.882,213,2.135,215,1.042,220,1.042,226,2.366,231,1.689,232,2.345,233,2.135,234,2.478,236,1.689,240,4.002,241,2.723,242,2.187,256,1.882,259,2.187,260,3.37,266,3.247,269,3.098,287,1.473,292,1.962,299,1.655,322,1.042,329,1.322,330,2.667,354,1.882,368,1.192,462,1.689,466,1.655,473,1.655,481,2.962,489,1.882,495,2.962,496,1.376,497,2.187,498,2.187,499,3.099,500,2.667,501,2.187,502,2.187,503,3.296,504,2.649,505,1.376,506,2.649,507,3.754,508,3.099,509,1.667,510,1.667,511,2.187,512,3.915,513,2.187,514,2.187,515,2.187,516,2.649,517,2.187,518,1.882,519,2.187,520,2.187,521,1.667,522,2.187,523,2.667,524,1.667,525,1.667,526,3.099,527,2.649,528,2.187,529,2.187,530,1.882,531,1.667,532,1.667,533,4.571,534,3.599,535,3.099,536,2.649,537,2.187,538,1.667,539,3.599,540,1.667,541,1.667,542,2.424,543,3.099,544,3.599,545,2.649,546,2.649,547,2.187,548,2.187,549,3.296,550,2.175,551,1.376,552,2.187,553,3.099,554,1.185,555,1.376,556,1.667,557,1.667,558,1.185,559,1.667,560,1.667,561,1.667,562,1.667,563,1.667,564,1.667,565,1.667,566,1.667,567,1.376,568,1.667]],["title/modules/PostsModule.html",[67,1.12,80,1.686]],["body/modules/PostsModule.html",[2,1.646,3,0.483,4,0.421,5,0.421,7,0.631,9,0.547,15,1.111,24,2.006,30,0.038,45,0.746,46,0.85,49,0.616,50,0.901,51,0.483,52,0.547,53,0.483,54,0.064,65,0.027,66,0.027,67,2.184,69,1.534,70,1.534,71,1.895,72,1.895,73,1.534,74,2.762,75,1.895,80,3.259,81,2.524,82,2.479,83,1.895,84,1.701,89,2.784,91,1.494,92,1.494,93,3.291,114,1.665,130,2.236,131,1.228,137,2.479,157,3.68,161,2.814,162,3.529,167,2.146,205,1.665,234,2.427,236,2.006,238,2.224,292,2.006,462,2.006,467,3.167,495,3.103,542,2.479,550,2.798,551,2.814,569,2.814,570,2.814,571,3.409,572,3.409,573,4.458,574,4.458,575,3.409]],["title/injectables/PostsService.html",[106,1.12,550,1.513]],["body/injectables/PostsService.html",[3,0.264,4,0.23,5,0.23,7,0.611,9,0.568,10,1.177,15,1.076,26,0.376,27,1.3,30,0.039,31,0.975,33,2.326,41,1.099,44,1.213,45,0.501,46,0.464,49,0.337,50,0.584,51,0.264,52,0.765,53,0.264,54,0.035,55,1.795,56,1.3,57,1.593,58,1.3,59,1.941,60,1.076,62,0.838,63,1.442,65,0.018,66,0.018,91,1.651,92,0.968,93,3.077,96,1.805,106,1.067,107,1.036,109,2.491,110,2.218,114,1.695,118,1.99,124,2.697,130,1.795,131,1.636,154,1.805,163,1.323,167,1.442,168,2.06,170,1.861,171,2.54,173,1.805,174,1.537,176,1.766,177,1.766,178,1.076,179,1.442,196,2.834,200,1.607,201,1.607,202,1.607,205,1.764,209,1.163,213,2.49,215,1.163,216,1.537,220,1.163,224,1.537,225,1.537,226,2.458,231,1.795,233,1.795,234,2.451,235,1.163,238,2.458,240,3.966,241,2.853,256,2.053,260,2.834,287,1.607,292,1.3,308,2.385,329,1.99,330,2.834,343,2.053,349,2.385,354,2.053,368,1.3,403,1.442,420,1.805,462,1.3,489,1.323,502,2.385,505,2.385,508,3.292,515,2.385,517,2.385,518,2.053,519,2.385,520,3.292,526,2.385,528,3.292,529,2.385,530,2.053,550,2.458,554,1.323,558,1.323,576,1.537,577,2.385,578,2.385,579,2.889,580,2.889,581,1.862,582,1.862,583,2.889,584,2.889,585,2.889,586,2.889,587,2.889,588,1.862,589,2.385,590,2.889,591,3.54,592,2.889,593,2.889,594,2.889,595,2.385,596,2.385,597,2.889,598,2.889,599,2.889,600,3.54,601,3.54,602,3.54,603,1.862,604,1.862,605,1.862,606,1.862,607,1.537]],["title/controllers/UsersController.html",[0,1.12,608,1.894]],["body/controllers/UsersController.html",[0,1.571,2,0.583,3,0.223,4,0.195,5,0.195,7,0.756,9,0.253,10,1.294,13,1.984,14,1.585,15,0.632,17,1.583,18,2.272,26,0.319,27,1.141,29,1.294,30,0.039,31,0.875,33,2.375,36,1.141,41,1.412,44,0.771,45,0.602,46,0.393,49,0.285,50,0.512,51,0.223,52,0.253,53,0.223,54,0.03,55,2.092,56,0.71,57,2.092,58,0.71,59,0.643,60,1.106,61,1.121,62,0.71,63,2.005,65,0.016,66,0.016,91,1.219,92,1.893,114,1.065,118,1.265,128,1.121,130,1.43,131,1.661,135,0.877,136,1.409,141,1.121,142,0.71,148,1.265,165,1.915,167,1.032,168,1.623,170,1.482,171,2.667,176,2.394,177,2.123,178,1.529,179,1.821,189,3.023,195,1.801,201,1.409,202,1.409,205,1.717,209,2.272,211,1.801,213,2.215,221,1.121,231,1.141,232,2.272,233,2.264,234,1.623,236,1.141,238,1.265,266,3.177,269,2.584,287,1.409,292,1.915,299,1.583,309,2.257,318,0.986,322,2.657,329,1.815,368,1.43,403,1.265,404,1.409,413,2.797,417,1.121,420,2.657,421,1.801,424,2.092,426,3.002,445,3.141,455,2.092,459,2.585,462,1.637,463,2.622,466,2.272,471,2.092,473,1.583,480,1.302,490,3.142,494,2.092,497,2.092,498,2.092,499,2.092,500,1.801,511,2.092,512,3.512,513,2.092,514,2.092,522,2.092,523,2.584,534,2.092,535,2.092,537,2.092,539,3.002,542,2.366,543,3.002,544,3.691,547,2.092,548,3.002,552,2.092,553,2.092,554,1.121,555,1.302,567,1.302,596,1.302,607,1.302,608,2.904,609,1.302,610,4.063,611,2.535,612,2.535,613,2.622,614,2.535,615,1.578,616,1.578,617,1.578,618,3.177,619,2.535,620,2.535,621,1.302,622,3.691,623,3.574,624,1.578,625,1.578,626,2.535,627,1.578,628,1.578,629,3.002,630,1.578,631,1.578,632,3.002,633,2.535,634,2.535,635,1.578,636,2.535,637,3.637,638,2.535,639,1.578,640,1.578,641,3.002,642,3.177,643,1.578,644,1.302,645,1.302,646,1.302,647,3.637,648,1.578,649,1.578,650,1.578,651,1.578,652,1.578,653,1.578,654,1.578,655,1.578,656,1.578,657,1.578,658,1.578,659,1.578,660,1.578,661,1.578,662,1.578]],["title/modules/UsersModule.html",[67,1.12,81,1.365]],["body/modules/UsersModule.html",[2,1.636,3,0.478,4,0.418,5,0.418,7,0.627,9,0.542,15,1.104,24,1.994,30,0.038,45,0.772,46,0.842,49,0.61,50,0.895,51,0.478,52,0.542,53,0.627,54,0.064,65,0.027,66,0.027,67,2.18,69,2.226,70,1.52,71,1.878,72,1.878,73,1.52,74,2.75,75,2.75,79,2.211,81,2.603,82,2.464,83,1.878,84,1.685,89,2.11,91,1.485,92,1.485,94,1.994,114,1.657,130,2.226,131,1.639,137,2.464,159,2.768,162,3.513,163,3.148,167,2.138,168,2.452,205,1.657,236,1.994,238,2.211,418,3.657,462,1.994,467,3.148,542,2.464,608,3.089,646,2.788,663,2.788,664,2.788,665,2.788,666,3.378,667,4.431,668,3.378,669,3.378]],["title/injectables/UsersService.html",[106,1.12,168,1.235]],["body/injectables/UsersService.html",[3,0.275,4,0.24,5,0.24,7,0.623,9,0.584,10,1.216,15,1.097,18,1.214,26,0.393,27,1.343,30,0.039,31,1.002,33,2.43,41,1.124,44,1.105,45,0.515,46,0.484,49,0.351,50,0.603,51,0.275,52,0.312,53,0.275,54,0.037,55,1.343,56,1.343,57,1.981,58,1.343,59,1.971,60,1.105,62,0.874,63,1.661,65,0.018,66,0.018,91,1.367,92,1.752,94,2.091,96,1.864,98,1.38,106,1.102,107,1.08,109,2.548,110,2.268,114,1.622,118,2.035,124,2.749,130,1.836,131,1.667,136,1.66,138,2.353,145,1.214,153,2.121,154,1.864,159,1.864,167,1.481,168,2.034,170,1.893,171,2.584,173,1.864,176,2.556,177,1.814,178,1.105,179,1.793,182,1.604,183,2.464,201,2.268,202,2.268,205,1.622,209,1.864,213,2.46,215,1.214,217,1.604,218,1.604,219,1.604,220,1.214,221,1.38,222,1.604,223,1.604,231,1.836,233,0.874,244,1.864,262,3.367,268,2.121,287,1.66,292,1.343,309,2.121,329,1.489,368,1.343,403,2.319,404,2.691,417,3.548,420,3.119,421,3.548,445,3.039,459,3.128,462,1.343,466,2.548,475,2.898,523,2.898,530,2.121,577,2.464,578,2.464,589,2.464,595,3.633,610,3.367,613,3,621,1.604,622,3.633,623,3.438,629,2.464,632,2.464,641,1.604,644,1.604,645,1.604,670,1.604,671,2.985,672,1.943,673,1.943,674,2.985,675,1.943,676,2.985,677,2.985,678,2.985,679,2.985,680,3.635,681,1.943,682,2.985,683,2.985,684,2.985,685,2.985,686,3.635,687,1.943,688,1.943,689,1.943,690,1.604,691,1.943,692,1.943,693,1.943,694,1.943,695,1.943,696,1.943,697,1.943,698,1.943,699,1.943]],["title/coverage.html",[700,2.929]],["body/coverage.html",[0,2.025,1,2.37,5,0.469,6,3.131,30,0.038,47,1.893,54,0.109,65,0.029,66,0.029,73,1.707,106,2.025,108,3.131,126,2.37,127,3.131,131,1.045,138,1.707,148,1.893,164,3.131,168,1.545,178,1.153,226,1.893,228,3.392,229,3.392,233,1.707,234,1.545,251,2.695,281,2.37,368,1.707,407,3.131,413,2.11,414,3.131,415,3.392,459,2.11,460,3.131,461,3.131,481,2.37,482,3.131,490,2.37,491,3.131,495,2.37,496,3.131,550,1.893,576,3.131,608,2.37,609,3.131,670,3.131,700,2.695,701,3.794,702,6.085,703,5.225,704,4.774,705,5.651,706,3.131,707,3.131,708,5.225,709,3.794,710,3.794,711,3.794,712,3.794,713,3.794,714,3.794,715,3.794]],["title/dependencies.html",[70,1.639,716,2.096]],["body/dependencies.html",[30,0.038,46,1.11,54,0.099,65,0.032,66,0.032,70,2.004,142,2.004,241,2.781,301,3.163,382,2.221,388,3.163,493,3.675,717,4.452,718,4.452,719,5.605,720,4.452,721,4.452,722,4.452,723,4.452,724,4.452,725,4.452,726,4.452,727,4.452,728,4.452,729,4.452,730,4.452]],["title/miscellaneous/enumerations.html",[731,1.586,732,3.007]],["body/miscellaneous/enumerations.html",[26,0.876,30,0.038,65,0.032,66,0.032,234,2.111,289,3.792,293,4.278,307,4.278,312,4.278,344,4.278,348,4.278,623,3.682,731,2.709,732,3.58,733,5.183,734,5.183,735,5.183,736,5.183,737,5.183,738,5.183,739,5.183]],["title/miscellaneous/functions.html",[731,1.586,740,3.007]],["body/miscellaneous/functions.html",[9,0.894,19,2.434,20,3.11,21,3.11,26,0.885,30,0.032,52,0.703,65,0.032,66,0.032,73,2.593,105,3.614,148,2.601,165,2.505,236,1.97,239,3.11,286,3.614,473,2.735,500,3.11,501,3.614,690,3.614,706,3.614,707,4.302,731,2.735,740,3.614,741,4.378,742,4.378,743,4.378,744,4.378,745,4.378,746,4.378,747,4.378,748,3.614,749,4.378,750,4.378,751,3.614,752,3.614,753,3.614]],["title/index.html",[26,0.513,754,2.539,755,2.539]],["body/index.html",[4,0.369,7,0.423,9,0.867,30,0.037,34,2.121,41,1.376,51,0.423,52,0.903,65,0.025,66,0.025,84,2.693,120,3.835,123,2.464,148,2.035,170,1.216,244,3.119,246,2.464,288,2.121,299,1.864,401,2.464,475,2.121,518,3.301,542,1.66,558,2.121,700,2.121,748,2.464,751,3.367,752,2.464,753,3.367,756,2.985,757,2.985,758,4.079,759,2.985,760,2.985,761,2.985,762,4.079,763,4.646,764,2.985,765,2.985,766,4.994,767,2.985,768,5.625,769,2.985,770,5.525,771,2.985,772,2.985,773,2.985,774,4.079,775,2.985,776,2.985,777,4.646,778,2.985,779,4.079,780,2.985,781,2.985,782,2.985,783,2.985,784,4.994,785,4.079,786,2.985,787,2.985,788,2.985,789,2.985,790,2.985,791,4.994,792,4.079,793,2.985,794,4.079,795,5.229,796,4.994,797,2.985,798,4.079,799,2.985,800,2.985,801,2.985,802,2.985,803,4.994,804,2.985,805,2.985,806,2.985,807,2.985,808,4.079,809,2.985,810,2.985,811,2.985,812,2.985,813,4.079,814,2.985,815,2.985,816,4.079,817,2.985,818,2.985,819,4.079,820,2.985,821,2.985,822,2.985,823,2.985,824,2.985,825,2.985,826,2.985,827,2.985,828,4.079,829,2.985,830,2.985,831,2.985,832,2.985,833,4.646,834,2.985,835,2.985,836,2.985,837,2.985,838,2.985,839,4.079,840,2.985,841,2.985,842,2.985,843,2.985,844,4.079,845,2.985,846,2.985,847,2.985,848,4.079,849,4.079,850,2.985,851,2.985,852,2.985,853,2.985,854,2.985,855,2.985,856,2.985,857,2.985,858,2.985,859,2.985,860,2.985,861,2.985,862,2.985,863,2.985,864,2.985,865,2.985,866,2.464]],["title/modules.html",[69,1.856]],["body/modules.html",[30,0.033,65,0.033,66,0.033,68,2.885,69,2.079,79,2.305,80,2.568,81,2.079,244,3.661,867,5.861,868,5.861,869,5.861]],["title/overview.html",[870,3.403]],["body/overview.html",[2,1.452,30,0.038,47,2.649,65,0.03,66,0.03,67,1.452,68,3.781,69,1.769,70,1.769,71,2.186,72,2.186,73,1.769,74,2.186,75,2.186,76,3.245,77,3.245,78,3.245,79,2.904,80,3.281,81,2.656,82,2.714,83,2.186,84,1.961,107,2.186,138,2.656,149,3.245,150,3.245,151,3.245,168,2.404,227,1.769,367,4.383,550,2.649,569,3.245,570,3.245,663,3.245,664,3.245,665,3.245,870,3.245,871,3.931]],["title/properties.html",[253,1.639,716,2.096]],["body/properties.html",[7,0.671,30,0.037,49,0.856,51,0.671,65,0.034,66,0.034,253,2.132,866,3.91,872,4.737,873,4.737]],["title/routes.html",[874,3.403]],["body/routes.html",[30,0.034,65,0.034,66,0.034,874,4.013]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":872,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["01t12:00:00z",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t12:00:00z'})@isiso8601()@isoptional",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["06",{"_index":597,"title":{},"body":{"injectables/PostsService.html":{}}}],["1",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.0.0",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["1.1.26",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["100",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":601,"title":{},"body":{"injectables/PostsService.html":{}}}],["10})@apiquery({name",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.1",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["123",{"_index":596,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1231",{"_index":595,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["1234",{"_index":480,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["1234})@apiquery({name",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["123get",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["128",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["13t",{"_index":598,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.1.0",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":522,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":507,"title":{},"body":{"controllers/PostsController.html":{}}}],["2023",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["3",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["4",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["4/4",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["456",{"_index":529,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["5/5",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":871,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["789",{"_index":519,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["8",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8601",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["9",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["96",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["accepts",{"_index":513,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["access",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["accessibility",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["account",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["action",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["actual",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["additional",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["address",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["advanced",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["allowing",{"_index":809,"title":{},"body":{"index.html":{}}}],["allows",{"_index":535,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["amazing",{"_index":854,"title":{},"body":{"index.html":{}}}],["another",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["api",{"_index":501,"title":{},"body":{"controllers/PostsController.html":{},"miscellaneous/functions.html":{}}}],["apioperation",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":532,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isint()@isnotempty",{"_index":485,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{}}}],["apipropertyoptional",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":506,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":762,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":68,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":47,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.gethello",{"_index":125,"title":{},"body":{"injectables/AppService.html":{}}}],["array",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["associate",{"_index":573,"title":{},"body":{"modules/PostsModule.html":{}}}],["associated",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["association",{"_index":579,"title":{},"body":{"injectables/PostsService.html":{}}}],["assuming",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attributes",{"_index":546,"title":{},"body":{"controllers/PostsController.html":{}}}],["auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":126,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authenticates",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["authmodule",{"_index":79,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["authorization",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authors",{"_index":574,"title":{},"body":{"modules/PostsModule.html":{}}}],["authservice",{"_index":138,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.isauth",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice.login('john_doe",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["automatically",{"_index":477,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["avoid",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":798,"title":{},"body":{"index.html":{}}}],["backend",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["backers",{"_index":855,"title":{},"body":{"index.html":{}}}],["based",{"_index":475,"title":{},"body":{"classes/GetUserParamsDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["basic",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["before",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["between",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["board",{"_index":847,"title":{},"body":{"index.html":{}}}],["body",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstraps",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["browse",{"_index":869,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":867,"title":{},"body":{"modules.html":{}}}],["building",{"_index":758,"title":{},"body":{"index.html":{}}}],["business",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["capabilities",{"_index":467,"title":{},"body":{"classes/GetUserParamsDto.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["categorization",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["categorize",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["category",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["channel",{"_index":821,"title":{},"body":{"index.html":{}}}],["character",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["checks",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["circular",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":54,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":808,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":793,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":569,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":571,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":570,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":663,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":664,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":665,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":814,"title":{},"body":{"index.html":{}}}],["communication",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["compodoc/compodoc",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["comprehensive",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/functions.html":{}}}],["configures",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["confirming",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["connectivity",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log('body",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('get",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('getuserparamsdto",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('limit",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('page",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constraints",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contact",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["contain",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["container",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["containing",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["contains",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["content",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":592,"title":{},"body":{"injectables/PostsService.html":{}}}],["control",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controls",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["core",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["correct",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["correctly",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["courses",{"_index":827,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":700,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":508,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createdat",{"_index":528,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost",{"_index":502,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":505,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":226,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":281,"title":{"classes/CreatePostMetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["creates",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":413,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto})@apiquery({name",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["creation",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["credentials",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["criteria",{"_index":476,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["current",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["custom",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["customization",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["data",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":605,"title":{},"body":{"injectables/PostsService.html":{}}}],["date",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["date().toisostring",{"_index":599,"title":{},"body":{"injectables/PostsService.html":{}}}],["declarations",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["decorators",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":823,"title":{},"body":{"index.html":{}}}],["default",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defines",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["dependencies",{"_index":70,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["deploy",{"_index":784,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":797,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":753,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["deploywith",{"_index":807,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["detailed",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["details",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["determines",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["development",{"_index":771,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":834,"title":{},"body":{"index.html":{}}}],["different",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["discord",{"_index":820,"title":{},"body":{"index.html":{}}}],["discovery",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["display",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dive",{"_index":822,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doe",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["doe'})@isnotempty",{"_index":411,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["draft",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"injectables/PostsService.html":{}}}],["dtos/create",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e.g",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{}}}],["e2e",{"_index":780,"title":{},"body":{"index.html":{}}}],["each",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":759,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":789,"title":{},"body":{"index.html":{}}}],["email",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["end",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["endpoint",{"_index":512,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["endpoints",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["ensure",{"_index":787,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":838,"title":{},"body":{"index.html":{}}}],["entire",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["entry",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["enum",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":732,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["error('unauthorized",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["example",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["existing",{"_index":534,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["experience",{"_index":825,"title":{},"body":{"index.html":{}}}],["explanation",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["export",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["extended",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["extends",{"_index":483,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["false})@isjson()@isoptional",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fast",{"_index":801,"title":{},"body":{"index.html":{}}}],["feature",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["featured",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["fetch",{"_index":471,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":589,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["few",{"_index":803,"title":{},"body":{"index.html":{}}}],["field",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["fields",{"_index":537,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filtering",{"_index":466,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":580,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(userid",{"_index":587,"title":{},"body":{"injectables/PostsService.html":{}}}],["first",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["firstname",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":810,"title":{},"body":{"index.html":{}}}],["follow",{"_index":841,"title":{},"body":{"index.html":{}}}],["format",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["formatted",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["formatting",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["foundation",{"_index":113,"title":{},"body":{"injectables/AppService.html":{}}}],["framework",{"_index":518,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["friendly",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["full",{"_index":837,"title":{},"body":{"index.html":{}}}],["function",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionality",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["functions",{"_index":740,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":805,"title":{},"body":{"index.html":{}}}],["generated",{"_index":520,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["generates",{"_index":590,"title":{},"body":{"injectables/PostsService.html":{}}}],["generation",{"_index":516,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/{:id",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/{:id}')@apioperation({summary",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":503,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":521,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":754,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(getuserparamsdto",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserparamsdto",{"_index":459,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getuserparamsdto.id",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers(getuserparamsdto",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["global",{"_index":745,"title":{},"body":{"miscellaneous/functions.html":{}}}],["graph",{"_index":830,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["group",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["grow",{"_index":851,"title":{},"body":{"index.html":{}}}],["grows",{"_index":116,"title":{},"body":{"injectables/AppService.html":{}}}],["handle",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["handles",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":750,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hands",{"_index":824,"title":{},"body":{"index.html":{}}}],["handy",{"_index":815,"title":{},"body":{"index.html":{}}}],["health",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["hello",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["help",{"_index":828,"title":{},"body":{"index.html":{}}}],["helps",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["here",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["html",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["http",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["https://example.com/image.jpg",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg'})@isurl()@isoptional",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":863,"title":{},"body":{"index.html":{}}}],["hyphens",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identification",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{}}}],["identifier",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["identifier.'})@apiresponse({status",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["image",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["images",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implementation",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["implemented",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["includes",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"miscellaneous/functions.html":{}}}],["including",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indicating",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["individual",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["infrastructure",{"_index":812,"title":{},"body":{"index.html":{}}}],["initializes",{"_index":742,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":106,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injection",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["install",{"_index":804,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":769,"title":{},"body":{"index.html":{}}}],["instance",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["integrates",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["integration",{"_index":577,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["integrity",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["interact",{"_index":831,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["isauthenticated",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":488,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnumber",{"_index":479,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["iso",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["isoptional()@isnumber()@type(undefined",{"_index":469,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["isstring",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(128)@matches(/^(?=.*[a",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issues",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["isurl",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["janedoe@gp.com",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":844,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":846,"title":{},"body":{"index.html":{}}}],["john",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["john.doe@example.com",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john@example.com",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["john@hao.com",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["johndoe@fo.com",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":857,"title":{},"body":{"index.html":{}}}],["json",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":860,"title":{},"body":{"index.html":{}}}],["key",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"index.html":{}}}],["last",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lastname",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["layer",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["learn",{"_index":817,"title":{},"body":{"index.html":{}}}],["legend",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["level",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["license",{"_index":866,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":849,"title":{},"body":{"index.html":{}}}],["limit",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":843,"title":{},"body":{"index.html":{}}}],["list",{"_index":523,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logged",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["logic",{"_index":110,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["login",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["login(username",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["long",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["looking",{"_index":792,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":468,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["loop",{"_index":840,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["main",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["maintaining",{"_index":547,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["makes",{"_index":799,"title":{},"body":{"index.html":{}}}],["manage",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["management",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["manages",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["managing",{"_index":811,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["math.floor(math.random",{"_index":600,"title":{},"body":{"injectables/PostsService.html":{}}}],["mau",{"_index":795,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["maxlength",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(128",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["memberof",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["message",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["meta",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["metadata",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["metaoptions",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":731,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":848,"title":{},"body":{"index.html":{}}}],["mode",{"_index":774,"title":{},"body":{"index.html":{}}}],["module",{"_index":67,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":69,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":791,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":474,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["myśliwiec",{"_index":861,"title":{},"body":{"index.html":{}}}],["name",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":835,"title":{},"body":{"index.html":{}}}],["needed",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{}}}],["nest",{"_index":763,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":865,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs'})@isstring()@isnotempty()@matches(/^[a",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs'})@isstring()@isnotempty()@minlength(4",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs.'})@isstring()@isoptional()@minlength(3",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs/common",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":493,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":806,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpost",{"_index":585,"title":{},"body":{"injectables/PostsService.html":{}}}],["node.js",{"_index":757,"title":{},"body":{"index.html":{}}}],["now",{"_index":606,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":768,"title":{},"body":{"index.html":{}}}],["number",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number(userid",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["numbers",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["objects",{"_index":530,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["object|object",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["offer",{"_index":845,"title":{},"body":{"index.html":{}}}],["official",{"_index":796,"title":{},"body":{"index.html":{}}}],["omitted",{"_index":472,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["one",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":850,"title":{},"body":{"index.html":{}}}],["operations",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["option",{"_index":408,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["option.dto",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option.dto.ts",{"_index":407,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["option.dto.ts:12",{"_index":410,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["option.dto.ts:19",{"_index":412,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["optional",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["organization",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["organize",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["organizes",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":870,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":716,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pagination",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pairs",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["param",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('userid",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["parameters",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto.ts",{"_index":461,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:32",{"_index":470,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["parseintpipe",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":836,"title":{},"body":{"index.html":{}}}],["partial",{"_index":543,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":487,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":484,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":492,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["password123",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":544,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":481,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":490,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["personal",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["personalization",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["pipes",{"_index":746,"title":{},"body":{"miscellaneous/functions.html":{}}}],["placeholder",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["platform",{"_index":794,"title":{},"body":{"index.html":{}}}],["please",{"_index":819,"title":{},"body":{"index.html":{}}}],["point",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["possible",{"_index":790,"title":{},"body":{"index.html":{}}}],["post",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post.dto",{"_index":489,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:113",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:132",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:151",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:169",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:187",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:208",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:232",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:9",{"_index":486,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:94",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":575,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/123",{"_index":527,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/posts.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":495,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":80,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":550,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice.createpost",{"_index":586,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice.findall('123",{"_index":594,"title":{},"body":{"injectables/PostsService.html":{}}}],["poststatus",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posttypes",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes.post",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["powerful",{"_index":517,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["predefined",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["primary",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{}}}],["private",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["processes",{"_index":583,"title":{},"body":{"injectables/PostsService.html":{}}}],["processing",{"_index":515,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["production",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["programming",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["progressive",{"_index":756,"title":{},"body":{"index.html":{}}}],["project",{"_index":766,"title":{},"body":{"index.html":{}}}],["proper",{"_index":500,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":253,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provide",{"_index":667,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["providing",{"_index":536,"title":{},"body":{"controllers/PostsController.html":{}}}],["public",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishing",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["purposes",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":463,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":818,"title":{},"body":{"index.html":{}}}],["read",{"_index":858,"title":{},"body":{"index.html":{}}}],["reading",{"_index":498,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["readonly",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":752,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["real",{"_index":832,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":765,"title":{},"body":{"index.html":{}}}],["represents",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":473,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["requests",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["requirements",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["requiring",{"_index":802,"title":{},"body":{"index.html":{}}}],["reset",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":813,"title":{},"body":{"index.html":{}}}],["responding",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["response",{"_index":607,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["restful",{"_index":497,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["result",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["retrieval",{"_index":462,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["retrieve",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieved",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["retrieves",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["retrieving",{"_index":465,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["return",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returning",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["returns",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":737,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rich",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["root",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["route",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{}}}],["routes",{"_index":874,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["rules",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["run",{"_index":770,"title":{},"body":{"index.html":{}}}],["running",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":788,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":604,"title":{},"body":{"injectables/PostsService.html":{}}}],["scalable",{"_index":760,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["scheduling",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["searchability",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["secure",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/UsersModule.html":{}}}],["securepass123",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["sensitive",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["seo",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":739,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":748,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["serves",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["services",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["services/auth.service",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/posts.service",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["services/users.service",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["session",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["setting",{"_index":743,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setup",{"_index":767,"title":{},"body":{"index.html":{}}}],["side",{"_index":761,"title":{},"body":{"index.html":{}}}],["simple",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["simulated",{"_index":591,"title":{},"body":{"injectables/PostsService.html":{}}}],["simulating",{"_index":602,"title":{},"body":{"injectables/PostsService.html":{}}}],["single",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["slug",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["specifically",{"_index":464,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["specified",{"_index":526,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["specifying",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sponsors",{"_index":853,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":733,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:40",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:30",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":669,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/services/auth.service",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/services/auth.service.ts",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/services/auth.service.ts:18",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:46",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/services/auth.service.ts:65",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":482,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":736,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":496,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:116",{"_index":541,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":525,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:84",{"_index":510,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":572,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/services/posts.service.ts",{"_index":576,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/services/posts.service.ts:20",{"_index":581,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/services/posts.service.ts:52",{"_index":588,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/services/posts.service.ts:88",{"_index":582,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":460,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":491,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/services/users.service",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/services/users.service.ts",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/services/users.service.ts:19",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:48",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:88",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:123",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:146",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:92",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":666,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":772,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":775,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":776,"title":{},"body":{"index.html":{}}}],["started",{"_index":755,"title":{"index.html":{}},"body":{}}],["starter",{"_index":764,"title":{},"body":{"index.html":{}}}],["startup",{"_index":749,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreatePostDto.html":{}}}],["statements",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["status.enum.ts",{"_index":734,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":839,"title":{},"body":{"index.html":{}}}],["steps",{"_index":785,"title":{},"body":{"index.html":{}}}],["stored",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["storing",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["story",{"_index":738,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":800,"title":{},"body":{"index.html":{}}}],["string",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string})@isstring()@isnotempty",{"_index":409,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["structure",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["structured",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["structures",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["success",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":540,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":509,"title":{},"body":{"controllers/PostsController.html":{}}}],["such",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{},"index.html":{},"modules.html":{}}}],["supports",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["svg",{"_index":868,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["swagger/openapi",{"_index":747,"title":{},"body":{"miscellaneous/functions.html":{}}}],["symbol",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["system",{"_index":511,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["table",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":786,"title":{},"body":{"index.html":{}}}],["temporal",{"_index":593,"title":{},"body":{"injectables/PostsService.html":{}}}],["test",{"_index":779,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":782,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":781,"title":{},"body":{"index.html":{}}}],["testing",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["tests",{"_index":777,"title":{},"body":{"index.html":{}}}],["text",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thanks",{"_index":852,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.getuserbyid",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["this.usersservice.getuserbyid(getuserparamsdto",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getusers(getuserparamsdto",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":514,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["throughout",{"_index":578,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["throw",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["throws",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["time",{"_index":833,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":584,"title":{},"body":{"injectables/PostsService.html":{}}}],["title",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":859,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["transformed",{"_index":478,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["transformer",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"dependencies.html":{}}}],["true",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":864,"title":{},"body":{"index.html":{}}}],["type",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type/category",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["types",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["types.enum",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["types.enum.ts",{"_index":735,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["typically",{"_index":603,"title":{},"body":{"injectables/PostsService.html":{}}}],["undefined",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isarray()@isoptional()@isstring({each",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isarray()@isoptional()@validatenested({each",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isenum(poststatus)@isnotempty",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isenum(posttypes)@isnotempty",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["understanding",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["unique",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":778,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":873,"title":{},"body":{"properties.html":{}}}],["up",{"_index":744,"title":{},"body":{"miscellaneous/functions.html":{}}}],["update",{"_index":533,"title":{},"body":{"controllers/PostsController.html":{}}}],["update.'})@apiresponse({status",{"_index":538,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":539,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updatepost",{"_index":504,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":531,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":542,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["updating",{"_index":499,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["uppercase",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["urls",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["used",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["user'})@get('/:userid",{"_index":524,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.dto",{"_index":494,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:39",{"_index":429,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:55",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:81",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:95",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":668,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/123?limit=5&page=1",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["users?limit=10&page=2",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller",{"_index":608,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":81,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":168,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice.getuserbyid",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.getusers",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["valid",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["validate",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["validatenested",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validates",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"injectables/PostsService.html":{}}}],["validation",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/GetUserParamsDto.html":{},"miscellaneous/enumerations.html":{}}}],["various",{"_index":545,"title":{},"body":{"controllers/PostsController.html":{}}}],["verification",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["verifies",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["verify",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["version",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["video",{"_index":826,"title":{},"body":{"index.html":{}}}],["visibility",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["visit",{"_index":816,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":829,"title":{},"body":{"index.html":{}}}],["watch",{"_index":773,"title":{},"body":{"index.html":{}}}],["way",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["website",{"_index":862,"title":{},"body":{"index.html":{}}}],["whether",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["working",{"_index":123,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["world",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["x",{"_index":842,"title":{},"body":{"index.html":{}}}],["yes",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":856,"title":{},"body":{"index.html":{}}}],["you're",{"_index":783,"title":{},"body":{"index.html":{}}}],["z0",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*?&]{8",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Main application controller that handles root-level HTTP requests.\nThis controller provides the basic endpoints for the application root path.\nIt serves as the entry point for testing application connectivity and\nbasic functionality verification.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Handles GET requests to the root path ('/').\nReturns a simple greeting message to verify that the application\nis running and responding to HTTP requests correctly.\nExample :GET /\n// Returns: \"Hello World!\"\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A greeting message from the application\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * Main application controller that handles root-level HTTP requests.\n * \n * This controller provides the basic endpoints for the application root path.\n * It serves as the entry point for testing application connectivity and\n * basic functionality verification.\n * \n * @controller AppController\n * @description Handles HTTP requests for the application root endpoints\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Controller()\nexport class AppController {\n  /**\n   * Creates an instance of AppController.\n   * \n   * @param {AppService} appService - The injected application service\n   * @memberof AppController\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Handles GET requests to the root path ('/').\n   * \n   * Returns a simple greeting message to verify that the application\n   * is running and responding to HTTP requests correctly.\n   * \n   * @returns {string} A greeting message from the application\n   * @memberof AppController\n   * @example\n   * GET /\n   * // Returns: \"Hello World!\"\n   */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The root application module that bootstraps and organizes the entire NestJS application.\nThis module serves as the entry point for the application and imports all feature modules\nincluding Users, Posts, and Authentication functionality. It defines the core application\nstructure and dependency injection container.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n/**\n * The root application module that bootstraps and organizes the entire NestJS application.\n * \n * This module serves as the entry point for the application and imports all feature modules\n * including Users, Posts, and Authentication functionality. It defines the core application\n * structure and dependency injection container.\n * \n * @module AppModule\n * @description Main application module that configures the NestJS application\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Main application service that provides core business logic.\nThis service contains the primary application logic and serves as the foundation\nfor the root-level functionality. It provides basic operations that can be\nextended as the application grows.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Returns a simple greeting message.\nThis method provides a basic health check functionality and serves\nas a simple way to verify that the service layer is working correctly.\nExample :const message = appService.getHello();\n// Returns: \"Hello World!\"\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A simple greeting message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Main application service that provides core business logic.\n * \n * This service contains the primary application logic and serves as the foundation\n * for the root-level functionality. It provides basic operations that can be\n * extended as the application grows.\n * \n * @service AppService\n * @description Core application service for basic operations\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Returns a simple greeting message.\n   * \n   * This method provides a basic health check functionality and serves\n   * as a simple way to verify that the service layer is working correctly.\n   * \n   * @returns {string} A simple greeting message\n   * @memberof AppService\n   * @example\n   * const message = appService.getHello();\n   * // Returns: \"Hello World!\"\n   */\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication controller that handles HTTP requests related to user authentication.\nThis controller provides endpoints for user authentication operations such as\nlogin, logout, and authentication status checks. It integrates with the\nAuthService to handle authentication business logic.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AuthService } from './services/auth.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * Authentication controller that handles HTTP requests related to user authentication.\n * \n * This controller provides endpoints for user authentication operations such as\n * login, logout, and authentication status checks. It integrates with the\n * AuthService to handle authentication business logic.\n * \n * @controller AuthController\n * @description Handles authentication-related HTTP requests\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Controller('auth')\n@ApiTags('Auth') // Use ApiTags to group the controller in Swagger documentation\nexport class AuthController {\n  /**\n   * Creates an instance of AuthController.\n   * \n   * @param {AuthService} authService - The injected authentication service\n   * @memberof AuthController\n   */\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Authentication module that handles user authentication and authorization.\nThis module provides authentication services including user login, logout,\nand authorization checks. It integrates with the Users module to validate\nuser credentials and manage authentication state.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthService } from './services/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n/**\n * Authentication module that handles user authentication and authorization.\n * \n * This module provides authentication services including user login, logout,\n * and authorization checks. It integrates with the Users module to validate\n * user credentials and manage authentication state.\n * \n * @module AuthModule\n * @description Manages authentication and authorization functionality\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Module({\n  providers: [AuthService],\n  controllers: [AuthController],\n  imports: [forwardRef(() => UsersModule)], // Import UsersModule with forwardRef if needed\n  exports: [AuthService], // Export AuthService if needed in other modules\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication service that provides authentication and authorization logic.\nThis service handles user authentication operations including login validation,\nsession management, and authorization checks. It integrates with the UsersService\nto validate user credentials and retrieve user information.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/services/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected users service for user operations\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/services/auth.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Checks if the current user is authenticated.\nThis method verifies the authentication status of the current session\nand returns a boolean indicating whether the user is authenticated.\nExample :const isAuthenticated = authService.isAuth();\n// Returns: false (placeholder implementation)\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if user is authenticated, false otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(username: string, password: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/services/auth.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Authenticates a user with username and password.\nThis method validates user credentials and returns authentication status.\nIt retrieves user information from the UsersService and validates the\nprovided credentials against stored user data.\nExample :const result = authService.login('john_doe', 'password123', '1');\n// Returns: \"Logged in successfully\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username for authentication\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password for authentication\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional user ID for additional validation\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Authentication result message\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { UsersService } from 'src/users/services/users.service';\n\n/**\n * Authentication service that provides authentication and authorization logic.\n * \n * This service handles user authentication operations including login validation,\n * session management, and authorization checks. It integrates with the UsersService\n * to validate user credentials and retrieve user information.\n * \n * @service AuthService\n * @description Provides authentication and authorization functionality\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Creates an instance of AuthService.\n   * \n   * @param {UsersService} usersService - The injected users service for user operations\n   * @memberof AuthService\n   */\n  constructor(\n    @Inject(forwardRef(() => UsersService)) // Use forwardRef to avoid circular dependency\n    private readonly usersService: UsersService, // Assuming UsersService is imported from the correct path\n  ) {}\n\n  /**\n   * Authenticates a user with username and password.\n   * \n   * This method validates user credentials and returns authentication status.\n   * It retrieves user information from the UsersService and validates the\n   * provided credentials against stored user data.\n   * \n   * @param {string} username - The username for authentication\n   * @param {string} password - The password for authentication\n   * @param {string} [userId] - Optional user ID for additional validation\n   * @returns {string} Authentication result message\n   * @memberof AuthService\n   * @example\n   * const result = authService.login('john_doe', 'password123', '1');\n   * // Returns: \"Logged in successfully\"\n   */\n  public login(username: string, password: string, userId?: string) {\n    let user = this.usersService.getUserById({\n      id: Number(userId),\n    });\n    return 'Logged in successfully'; // Placeholder for login logic\n  }\n\n  /**\n   * Checks if the current user is authenticated.\n   * \n   * This method verifies the authentication status of the current session\n   * and returns a boolean indicating whether the user is authenticated.\n   * \n   * @returns {boolean} True if user is authenticated, false otherwise\n   * @memberof AuthService\n   * @example\n   * const isAuthenticated = authService.isAuth();\n   * // Returns: false (placeholder implementation)\n   */\n  public isAuth() {\n    return false; // Placeholder for authentication check logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new post.\nThis DTO defines the comprehensive structure and validation rules for post creation\nrequests. It includes validation for post content, metadata, categorization,\nand publishing information with support for rich content features like tags,\nfeatured images, and custom meta options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Content of the post', example: 'This is a detailed explanation of NestJS.'})@IsString()@IsOptional()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:132\n                        \n                    \n\n            \n                \n                    The main content body of the post.\nOptional field containing the detailed content of the post.\nSupports rich text and markdown formatting for comprehensive content creation.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image URL for the post', example: 'https://example.com/image.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:169\n                        \n                    \n\n            \n                \n                    URL of the featured image for the post.\nOptional field for specifying a featured image that represents\nthe post content. Must be a valid URL format.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Meta options for the post', type: undefined, example: undefined})@IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:232\n                        \n                    \n\n            \n                \n                    Custom meta options for extended post configuration.\nOptional array of key-value pairs for storing additional\nmetadata and configuration options specific to the post.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of the post', enum: postTypes, example: undefined})@IsEnum(postTypes)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n            \n                \n                    The type/category of the post.\nDefines the content type using predefined post types enum.\nHelps categorize and organize different types of content.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Published date of the post', example: '2023-10-01T12:00:00Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:187\n                        \n                    \n\n            \n                \n                    The scheduled or actual publication date of the post.\nISO 8601 formatted date string indicating when the post\nshould be or was published. Used for scheduling and organization.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Schema for the post, if applicable', example: '{\"key\": \"value\"}', required: false})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:151\n                        \n                    \n\n            \n                \n                    JSON schema for structured post data.\nOptional field for storing structured metadata or configuration\nin JSON format for advanced post customization.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique slug for the post', example: 'understanding-nestjs'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be lowercase and can only contain letters, numbers, and hyphens.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:94\n                        \n                    \n\n            \n                \n                    URL-friendly slug for the post.\nMust be lowercase and contain only letters, numbers, and hyphens.\nUsed for creating SEO-friendly URLs and unique post identification.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status of the post', enum: postStatus, example: undefined})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n            \n                \n                    The publication status of the post.\nDetermines whether the post is published, draft, or in another state.\nControls post visibility and accessibility to end users.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tags associated with the post', type: undefined, example: undefined})@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:208\n                        \n                    \n\n            \n                \n                    Array of tags associated with the post.\nOptional array of string tags for categorization and searchability.\nEach tag must be at least 3 characters long and helps with content discovery.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Title of the post', example: 'Understanding NestJS'})@IsString()@IsNotEmpty()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n            \n                \n                    The title of the post.\nMust be at least 4 characters long and serves as the primary\nidentifier for the post content. Used for display and SEO purposes.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  MinLength,\n  IsEnum,\n  IsUrl,\n  IsArray,\n  Matches,\n  IsJSON,\n  IsISO8601,\n  ValidateNested,\n} from 'class-validator';\nimport { postTypes } from '../enums/post-types.enum';\nimport { postStatus } from '../enums/post-status.enum';\nimport { CreatePostMetaOptionDto } from './create-post-meta-option.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Data Transfer Object for creating a new post.\n * \n * This DTO defines the comprehensive structure and validation rules for post creation\n * requests. It includes validation for post content, metadata, categorization,\n * and publishing information with support for rich content features like tags,\n * featured images, and custom meta options.\n * \n * @class CreatePostDto\n * @description Validates and structures post creation data with comprehensive content management\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\nexport class CreatePostDto {\n  /**\n   * The title of the post.\n   * \n   * Must be at least 4 characters long and serves as the primary\n   * identifier for the post content. Used for display and SEO purposes.\n   * \n   * @type {string}\n   * @memberof CreatePostDto\n   * @example \"Understanding NestJS\"\n   */\n  @ApiProperty({\n    description: 'Title of the post',\n    example: 'Understanding NestJS',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  title: string;\n\n  /**\n   * The type/category of the post.\n   * \n   * Defines the content type using predefined post types enum.\n   * Helps categorize and organize different types of content.\n   * \n   * @type {postTypes}\n   * @memberof CreatePostDto\n   * @example postTypes.POST\n   */\n  @ApiProperty({\n    description: 'Type of the post',\n    enum: postTypes,\n    example: postTypes.POST,\n  })\n  @IsEnum(postTypes)\n  @IsNotEmpty()\n  postType: postTypes;\n\n  /**\n   * URL-friendly slug for the post.\n   * \n   * Must be lowercase and contain only letters, numbers, and hyphens.\n   * Used for creating SEO-friendly URLs and unique post identification.\n   * \n   * @type {string}\n   * @memberof CreatePostDto\n   * @example \"understanding-nestjs\"\n   */\n\n  @ApiProperty({\n    description: 'Unique slug for the post',\n    example: 'understanding-nestjs',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug must be lowercase and can only contain letters, numbers, and hyphens.',\n  })\n  slug: string;\n\n  /**\n   * The publication status of the post.\n   * \n   * Determines whether the post is published, draft, or in another state.\n   * Controls post visibility and accessibility to end users.\n   * \n   * @type {postStatus}\n   * @memberof CreatePostDto\n   * @example postStatus.DRAFT\n   */\n  @ApiProperty({\n    description: 'Status of the post',\n    enum: postStatus,\n    example: postStatus.DRAFT,\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  /**\n   * The main content body of the post.\n   * \n   * Optional field containing the detailed content of the post.\n   * Supports rich text and markdown formatting for comprehensive content creation.\n   * \n   * @type {string}\n   * @memberof CreatePostDto\n   * @example \"This is a detailed explanation of NestJS.\"\n   */\n  @ApiPropertyOptional({\n    description: 'Content of the post',\n    example: 'This is a detailed explanation of NestJS.',\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  content?: string;\n\n  /**\n   * JSON schema for structured post data.\n   * \n   * Optional field for storing structured metadata or configuration\n   * in JSON format for advanced post customization.\n   * \n   * @type {string}\n   * @memberof CreatePostDto\n   * @example '{\"key\": \"value\"}'\n   */\n  @ApiPropertyOptional({\n    description: 'Schema for the post, if applicable',\n    example: '{\"key\": \"value\"}',\n    required: false,\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  /**\n   * URL of the featured image for the post.\n   * \n   * Optional field for specifying a featured image that represents\n   * the post content. Must be a valid URL format.\n   * \n   * @type {string}\n   * @memberof CreatePostDto\n   * @example \"https://example.com/image.jpg\"\n   */\n  @ApiPropertyOptional({\n    description: 'Featured image URL for the post',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  featuredImageUrl?: string;\n\n  /**\n   * The scheduled or actual publication date of the post.\n   * \n   * ISO 8601 formatted date string indicating when the post\n   * should be or was published. Used for scheduling and organization.\n   * \n   * @type {Date}\n   * @memberof CreatePostDto\n   * @example \"2023-10-01T12:00:00Z\"\n   */\n  @ApiPropertyOptional({\n    description: 'Published date of the post',\n    example: '2023-10-01T12:00:00Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishedOn?: Date;\n\n  /**\n   * Array of tags associated with the post.\n   * \n   * Optional array of string tags for categorization and searchability.\n   * Each tag must be at least 3 characters long and helps with content discovery.\n   * \n   * @type {string[]}\n   * @memberof CreatePostDto\n   * @example [\"nestjs\", \"typescript\", \"backend\"]\n   */\n  @ApiPropertyOptional({\n    description: 'Tags associated with the post',\n    type: [String],\n    example: ['nestjs', 'typescript', 'backend'],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  /**\n   * Custom meta options for extended post configuration.\n   * \n   * Optional array of key-value pairs for storing additional\n   * metadata and configuration options specific to the post.\n   * \n   * @type {CreatePostMetaOptionDto[]}\n   * @memberof CreatePostDto\n   * @example [{ key: \"author\", value: \"John Doe\" }, { key: \"category\", value: \"Programming\" }]\n   */\n  @ApiPropertyOptional({\n    description: 'Meta options for the post',\n    type: [CreatePostMetaOptionDto],\n    example: [\n      { key: 'author', value: 'John Doe' },\n      { key: 'category', value: 'Programming' },\n    ],\n  })\n  @IsArray()\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionDto)\n  metaOptions?: CreatePostMetaOptionDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionDto.html":{"url":"classes/CreatePostMetaOptionDto.html","title":"class - CreatePostMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-option.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Key for the post meta option', example: 'author', type: String})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-option.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Value for the post meta option', example: 'John Doe'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-option.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionDto {\n  @ApiProperty({\n    description: 'Key for the post meta option',\n    example: 'author',\n    type: String,\n  })\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @ApiProperty({\n    description: 'Value for the post meta option',\n    example: 'John Doe',\n  })\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new user.\nThis DTO defines the structure and validation rules for user creation\nrequests. It includes comprehensive validation for user data including\nname constraints, email format validation, and secure password requirements.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:95\n                        \n                    \n\n            \n                \n                    The user's email address.\nMust be a valid email format and is required for account creation.\nUsed for user authentication and communication.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:39\n                        \n                    \n\n            \n                \n                    The user's first name.\nMust be a string between 3 and 96 characters long.\nThis field is required for user identification and personalization.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:55\n                        \n                    \n\n            \n                \n                    The user's last name.\nOptional string field between 3 and 96 characters long.\nProvides additional user identification information.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(128)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,}$/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one symbol.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:81\n                        \n                    \n\n            \n                \n                    The user's password.\nMust be a secure password between 8 and 128 characters containing:\n\nAt least one uppercase letter\nAt least one lowercase letter\nAt least one number\nAt least one special character (@$!%*?&)\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  MinLength,\n  MaxLength,\n  IsEmail,\n  Matches,\n} from 'class-validator';\n\n/**\n * Data Transfer Object for creating a new user.\n * \n * This DTO defines the structure and validation rules for user creation\n * requests. It includes comprehensive validation for user data including\n * name constraints, email format validation, and secure password requirements.\n * \n * @class CreateUserDto\n * @description Validates and structures user creation data\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\nexport class CreateUserDto {\n  /**\n   * The user's first name.\n   * \n   * Must be a string between 3 and 96 characters long.\n   * This field is required for user identification and personalization.\n   * \n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"John\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * The user's last name.\n   * \n   * Optional string field between 3 and 96 characters long.\n   * Provides additional user identification information.\n   * \n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"Doe\"\n   */\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName: string;\n\n  /**\n   * The user's password.\n   * \n   * Must be a secure password between 8 and 128 characters containing:\n   * - At least one uppercase letter\n   * - At least one lowercase letter\n   * - At least one number\n   * - At least one special character (@$!%*?&)\n   * \n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"SecurePass123!\"\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(128)\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'Password must contain at least one uppercase letter, one lowercase letter, one number, and one symbol.',\n    },\n  )\n  password: string;\n\n  /**\n   * The user's email address.\n   * \n   * Must be a valid email format and is required for account creation.\n   * Used for user authentication and communication.\n   * \n   * @type {string}\n   * @memberof CreateUserDto\n   * @example \"john.doe@example.com\"\n   */\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-params.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for user retrieval parameters.\nThis DTO defines the structure and validation rules for user query\nparameters, specifically for retrieving users by their unique identifier.\nIt provides optional filtering capabilities for user lookup operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-params.dto.ts:32\n                        \n                    \n\n            \n                \n                    Optional user identifier for specific user retrieval.\nWhen provided, this ID is used to fetch a specific user.\nIf omitted, the request may return multiple users based on other criteria.\nThe value is automatically transformed from string to number.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsNumber, IsOptional } from 'class-validator';\n\n/**\n * Data Transfer Object for user retrieval parameters.\n * \n * This DTO defines the structure and validation rules for user query\n * parameters, specifically for retrieving users by their unique identifier.\n * It provides optional filtering capabilities for user lookup operations.\n * \n * @class GetUserParamsDto\n * @description Validates and structures user query parameters\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\nexport class GetUserParamsDto {\n  /**\n   * Optional user identifier for specific user retrieval.\n   * \n   * When provided, this ID is used to fetch a specific user.\n   * If omitted, the request may return multiple users based on other criteria.\n   * The value is automatically transformed from string to number.\n   * \n   * @type {number}\n   * @memberof GetUserParamsDto\n   * @example 1234\n   */\n  @IsOptional()\n  @IsNumber()\n  @Type(() => Number)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty()\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Posts controller that handles HTTP requests related to post management.\nThis controller provides RESTful endpoints for post operations including\ncreating, reading, and updating posts. It supports user-specific post\nretrieval and comprehensive post management with proper validation\nand API documentation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 201, description: 'Post created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Creates a new post in the system.\nThis endpoint accepts post data through the request body and creates\na new post with proper validation, content processing, and metadata\nmanagement including slug generation and content categorization.\nExample :POST /posts\nBody: {\n  \"title\": \"Understanding NestJS\",\n  \"content\": \"NestJS is a powerful framework...\",\n  \"postType\": \"POST\"\n}\n// Returns: { id: 789, title: \"Understanding NestJS\", ... }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPost data for creating new content\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post object with generated metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'List of posts for the user'})@Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis endpoint returns a list of all posts associated with the specified\nuser ID. It provides user-specific content filtering and supports\ncomprehensive post data retrieval.\nExample :GET /posts/123\n// Returns: [{ user: {...}, content: \"...\", createdAt: \"...\", id: 456 }]\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique identifier of the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Array of post objects for the specified user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update an existing post', description: 'This endpoint allows you to update an existing post by providing the post ID and the fields to update.'})@ApiResponse({status: 201, description: 'Post updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates an existing post with new information.\nThis endpoint allows partial updates to post content and metadata\nusing the PATCH method. It supports updating various post attributes\nwhile maintaining data integrity and content validation.\nExample :PATCH /posts\nBody: {\n  \"title\": \"Updated Post Title\",\n  \"content\": \"Updated content...\"\n}\n// Returns: \"This method is not implemented yet\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPartial post data for updates\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Update status message\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './services/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n/**\n * Posts controller that handles HTTP requests related to post management.\n * \n * This controller provides RESTful endpoints for post operations including\n * creating, reading, and updating posts. It supports user-specific post\n * retrieval and comprehensive post management with proper validation\n * and API documentation.\n * \n * @controller PostsController\n * @description Handles post-related HTTP requests and operations\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Controller('posts')\n@ApiTags('Posts') // Use ApiTags to group the controller in Swagger documentation\nexport class PostsController {\n  /**\n   * Creates an instance of PostsController.\n   * \n   * @param {PostsService} postsService - The injected posts service\n   * @memberof PostsController\n   */\n  constructor(\n    // Inject any required services here, e.g., PostsService\n    private readonly postsService: PostsService,\n  ) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * \n   * This endpoint returns a list of all posts associated with the specified\n   * user ID. It provides user-specific content filtering and supports\n   * comprehensive post data retrieval.\n   * \n   * @param {string} userId - The unique identifier of the user\n   * @returns {object[]} Array of post objects for the specified user\n   * @memberof PostsController\n   * @example\n   * GET /posts/123\n   * // Returns: [{ user: {...}, content: \"...\", createdAt: \"...\", id: 456 }]\n   */\n  @ApiResponse({\n    status: 200,\n    description: 'List of posts for the user',\n  })\n  @Get('/:userId')\n  public getPosts(\n    @Param('userId') userId: string, // Use Param decorator to get userId from the route\n  ) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * Creates a new post in the system.\n   * \n   * This endpoint accepts post data through the request body and creates\n   * a new post with proper validation, content processing, and metadata\n   * management including slug generation and content categorization.\n   * \n   * @param {CreatePostDto} createPostDto - Post data for creating new content\n   * @returns {object} The created post object with generated metadata\n   * @memberof PostsController\n   * @example\n   * POST /posts\n   * Body: {\n   *   \"title\": \"Understanding NestJS\",\n   *   \"content\": \"NestJS is a powerful framework...\",\n   *   \"postType\": \"POST\"\n   * }\n   * // Returns: { id: 789, title: \"Understanding NestJS\", ... }\n   */\n  @ApiResponse({\n    status: 201,\n    description: 'Post created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.createPost(createPostDto);\n  }\n\n  /**\n   * Updates an existing post with new information.\n   * \n   * This endpoint allows partial updates to post content and metadata\n   * using the PATCH method. It supports updating various post attributes\n   * while maintaining data integrity and content validation.\n   * \n   * @param {PatchPostDto} patchPostDto - Partial post data for updates\n   * @returns {string} Update status message\n   * @memberof PostsController\n   * @example\n   * PATCH /posts\n   * Body: {\n   *   \"title\": \"Updated Post Title\",\n   *   \"content\": \"Updated content...\"\n   * }\n   * // Returns: \"This method is not implemented yet\"\n   */\n  @ApiOperation({\n    summary: 'Update an existing post',\n    description:\n      'This endpoint allows you to update an existing post by providing the post ID and the fields to update.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Post updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return 'This method is not implemented yet';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Posts module that manages post-related functionality.\nThis module provides comprehensive post management capabilities including\npost creation, retrieval, updates, and post data management. It integrates\nwith the Users module to associate posts with their authors and manage\nuser-specific post operations.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './services/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n/**\n * Posts module that manages post-related functionality.\n * \n * This module provides comprehensive post management capabilities including\n * post creation, retrieval, updates, and post data management. It integrates\n * with the Users module to associate posts with their authors and manage\n * user-specific post operations.\n * \n * @module PostsModule\n * @description Manages post-related operations and data\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/services/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Posts service that provides post-related business logic and data operations.\nThis service handles all post-related operations including post creation,\nretrieval, management, and integration with user services. It provides\nthe core business logic for post operations throughout the application,\nincluding content processing and user association.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/services/posts.service.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of PostsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected users service for user operations\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/services/posts.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Creates a new post with the provided data.\nThis method processes the post creation data, validates the content,\nand returns the created post with generated metadata including\nunique identification and creation timestamp.\nExample :const newPost = postsService.createPost({\n  title: \"Understanding NestJS\",\n  content: \"NestJS is a powerful framework...\",\n  postType: \"POST\"\n});\n// Returns: { id: 789, title: \"Understanding NestJS\", ... }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe post data for creation\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created post object with generated metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/services/posts.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\nThis method fetches all posts associated with the specified user ID,\nincluding user information and post metadata. It generates simulated\npost data with user context and temporal information.\nExample :const posts = postsService.findAll('123');\n// Returns: [\n//   {\n//     user: { id: 1231, firstName: \"John\", ... },\n//     content: \"This is a post content for user 123\",\n//     createdAt: \"2023-06-13T...\",\n//     id: 456\n//   }\n// ]\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique identifier of the user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of post objects with user and content information\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/services/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\n\n/**\n * Posts service that provides post-related business logic and data operations.\n * \n * This service handles all post-related operations including post creation,\n * retrieval, management, and integration with user services. It provides\n * the core business logic for post operations throughout the application,\n * including content processing and user association.\n * \n * @service PostsService\n * @description Provides post management and data operations\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Creates an instance of PostsService.\n   * \n   * @param {UsersService} usersService - The injected users service for user operations\n   * @memberof PostsService\n   */\n  constructor(\n    private readonly usersService: UsersService, // Inject UsersService if needed\n  ) {}\n\n  /**\n   * Retrieves all posts for a specific user.\n   * \n   * This method fetches all posts associated with the specified user ID,\n   * including user information and post metadata. It generates simulated\n   * post data with user context and temporal information.\n   * \n   * @param {string} userId - The unique identifier of the user\n   * @returns {object[]} Array of post objects with user and content information\n   * @memberof PostsService\n   * @example\n   * const posts = postsService.findAll('123');\n   * // Returns: [\n   * //   {\n   * //     user: { id: 1231, firstName: \"John\", ... },\n   * //     content: \"This is a post content for user 123\",\n   * //     createdAt: \"2023-06-13T...\",\n   * //     id: 456\n   * //   }\n   * // ]\n   */\n  public findAll(userId: string) {\n    const user = this.usersService.getUserById({ id: Number(userId) });\n    return [\n      {\n        user: user,\n        content: 'This is a post content for user ' + userId,\n        createdAt: new Date().toISOString(),\n        id: Math.floor(Math.random() * 1000), // Simulating a post ID\n      },\n      {\n        user: user,\n        content: 'This is another post content for user ' + userId,\n        createdAt: new Date().toISOString(),\n        id: Math.floor(Math.random() * 1000) + 1, // Simulating another post ID\n      },\n    ];\n  }\n\n  /**\n   * Creates a new post with the provided data.\n   * \n   * This method processes the post creation data, validates the content,\n   * and returns the created post with generated metadata including\n   * unique identification and creation timestamp.\n   * \n   * @param {CreatePostDto} createPostDto - The post data for creation\n   * @returns {object} The created post object with generated metadata\n   * @memberof PostsService\n   * @example\n   * const newPost = postsService.createPost({\n   *   title: \"Understanding NestJS\",\n   *   content: \"NestJS is a powerful framework...\",\n   *   postType: \"POST\"\n   * });\n   * // Returns: { id: 789, title: \"Understanding NestJS\", ... }\n   */\n  public createPost(createPostDto: CreatePostDto) {\n    // Here you would typically save the post to a database\n    // For now, we will just return the DTO as a simulated response\n    return {\n      id: Math.floor(Math.random() * 1000), // Simulating a post ID\n      ...createPostDto,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users controller that handles HTTP requests related to user management.\nThis controller provides RESTful endpoints for user operations including\ncreating, reading, updating users. It supports pagination, filtering,\nand individual user retrieval with comprehensive validation and documentation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:123\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the system.\nThis endpoint accepts user data through the request body and creates\na new user account with proper validation and data integrity checks.\nExample :POST /users\nBody: {\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n```html\n  \"password\": \"SecurePass123!\"\n}\n// Returns: \"This action creates a new user\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data for creating new account\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Success message confirming user creation\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/{:id}')@ApiOperation({summary: 'Get user by ID', description: 'Fetch a user by their unique identifier.'})@ApiResponse({status: 200, description: 'The user has been successfully retrieved.', type: CreateUserDto})@ApiQuery({name: 'id', required: false, description: 'The unique identifier of the user', type: 'number', example: 1234})@ApiQuery({name: 'limit', required: false, description: 'The maximum number of users to return', type: 'number', example: 10})@ApiQuery({name: 'page', required: false, description: 'The page number for pagination', type: 'number', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:92\n                        \n                    \n\n\n            \n                \n                        Retrieves users with optional filtering and pagination.\nThis endpoint can return either a specific user by ID or a paginated list\nof all users. It supports query parameters for pagination control and\npath parameters for specific user retrieval.\nExample :GET /users/123?limit=5&page=1\n// Returns specific user with ID 123GET /users?limit=10&page=2\n// Returns paginated list of users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPath parameters including optional user ID\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to return (default: 10)\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination (default: 1)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Single user object or array of users\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:146\n                        \n                    \n\n\n            \n                \n                        Updates an existing user's information.\nThis endpoint allows partial updates to user information using\nthe PATCH method. Only provided fields will be updated while\nmaintaining data integrity and validation.\nExample :PATCH /users\nBody: {\n  \"firstName\": \"Jane\"\n}\n// Returns: { \"firstName\": \"Jane\" }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPartial user data for updates\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                The updated user data\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUserParamsDto } from './dtos/get-user-params.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './services/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n/**\n * Users controller that handles HTTP requests related to user management.\n * \n * This controller provides RESTful endpoints for user operations including\n * creating, reading, updating users. It supports pagination, filtering,\n * and individual user retrieval with comprehensive validation and documentation.\n * \n * @controller UsersController\n * @description Handles user-related HTTP requests and operations\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Creates an instance of UsersController.\n   * \n   * @param {UsersService} usersService - The injected users service\n   * @memberof UsersController\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Retrieves users with optional filtering and pagination.\n   * \n   * This endpoint can return either a specific user by ID or a paginated list\n   * of all users. It supports query parameters for pagination control and\n   * path parameters for specific user retrieval.\n   * \n   * @param {GetUserParamsDto} getUserParamsDto - Path parameters including optional user ID\n   * @param {number} limit - Maximum number of users to return (default: 10)\n   * @param {number} page - Page number for pagination (default: 1)\n   * @returns {object|object[]} Single user object or array of users\n   * @memberof UsersController\n   * @example\n   * GET /users/123?limit=5&page=1\n   * // Returns specific user with ID 123\n   * \n   * GET /users?limit=10&page=2\n   * // Returns paginated list of users\n   */\n  @Get('/{:id}')\n  @ApiOperation({\n    summary: 'Get user by ID',\n    description: 'Fetch a user by their unique identifier.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The user has been successfully retrieved.',\n    type: CreateUserDto, // Assuming CreateUserDto is used for the response\n  })\n  @ApiQuery({\n    name: 'id',\n    required: false,\n    description: 'The unique identifier of the user',\n    type: 'number',\n    example: 1234,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    description: 'The maximum number of users to return',\n    type: 'number',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    description: 'The page number for pagination',\n    type: 'number',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamsDto: GetUserParamsDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    if (getUserParamsDto.id) {\n      return this.usersService.getUserById(getUserParamsDto);\n    }\n    return this.usersService.getUsers(getUserParamsDto, limit, page);\n  }\n\n  /**\n   * Creates a new user in the system.\n   * \n   * This endpoint accepts user data through the request body and creates\n   * a new user account with proper validation and data integrity checks.\n   * \n   * @param {CreateUserDto} createUserDto - User data for creating new account\n   * @returns {string} Success message confirming user creation\n   * @memberof UsersController\n   * @example\n   * POST /users\n   * Body: {\n   *   \"firstName\": \"John\",\n   *   \"lastName\": \"Doe\",\n   *   \"email\": \"john@example.com\",\n   *   \"password\": \"SecurePass123!\"\n   * }\n   * // Returns: \"This action creates a new user\"\n   */\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    console.log('Body:', createUserDto);\n    return 'This action creates a new user';\n  }\n\n  /**\n   * Updates an existing user's information.\n   * \n   * This endpoint allows partial updates to user information using\n   * the PATCH method. Only provided fields will be updated while\n   * maintaining data integrity and validation.\n   * \n   * @param {PatchUserDto} patchUserDto - Partial user data for updates\n   * @returns {PatchUserDto} The updated user data\n   * @memberof UsersController\n   * @example\n   * PATCH /users\n   * Body: {\n   *   \"firstName\": \"Jane\"\n   * }\n   * // Returns: { \"firstName\": \"Jane\" }\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Users module that manages user-related functionality.\nThis module provides comprehensive user management capabilities including\nuser creation, retrieval, updates, and user data management. It integrates\nwith the Authentication module to provide secure user operations.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './services/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n/**\n * Users module that manages user-related functionality.\n * \n * This module provides comprehensive user management capabilities including\n * user creation, retrieval, updates, and user data management. It integrates\n * with the Authentication module to provide secure user operations.\n * \n * @module UsersModule\n * @description Manages user-related operations and data\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService], // Export UsersService if needed in other modules\n  imports: [forwardRef(() => AuthModule)], // Import other modules if needed\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/services/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users service that provides user-related business logic and data operations.\nThis service handles all user-related operations including user retrieval,\nuser management, and integration with authentication services. It provides\nthe core business logic for user operations throughout the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getUserById\n                            \n                            \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/services/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of UsersService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected authentication service\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(getUserParamsDto: GetUserParamsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/services/users.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific user by their unique identifier.\nThis method fetches user information based on the provided user ID\nand returns detailed user data including personal information and\ncontact details.\nExample :const user = usersService.getUserById({ id: 1231 });\n// Returns: { id: 1231, firstName: \"John\", lastName: \"Doe\", email: \"john@hao.com\" }\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters containing the user ID\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; lastName: string; email: string; }\n\n                        \n                            \n                                User object with detailed information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/services/users.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of users with optional filtering.\nThis method returns a list of users based on the provided parameters,\nwith support for pagination and authentication checks. It verifies\nuser authorization before returning sensitive user data.\nExample :const users = usersService.getUsers({}, 10, 1);\n// Returns: [{ firstName: \"John\", lastName: \"Doe\", email: \"johndoe@fo.com\" }, ...]\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for user filtering\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to return\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Array of user objects\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUserParamsDto } from '../dtos/get-user-params.dto';\nimport { AuthService } from 'src/auth/services/auth.service';\n\n/**\n * Users service that provides user-related business logic and data operations.\n * \n * This service handles all user-related operations including user retrieval,\n * user management, and integration with authentication services. It provides\n * the core business logic for user operations throughout the application.\n * \n * @service UsersService\n * @description Provides user management and data operations\n * @version 1.0.0\n * @author NestJS Application\n * @since 1.0.0\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Creates an instance of UsersService.\n   * \n   * @param {AuthService} authService - The injected authentication service\n   * @memberof UsersService\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService)) // Use forwardRef to avoid circular dependency issues\n    private readonly authService: AuthService, // Assuming AuthService is imported from the correct path\n  ) {}\n\n  /**\n   * Retrieves a paginated list of users with optional filtering.\n   * \n   * This method returns a list of users based on the provided parameters,\n   * with support for pagination and authentication checks. It verifies\n   * user authorization before returning sensitive user data.\n   * \n   * @param {GetUserParamsDto} getUserParamsDto - Parameters for user filtering\n   * @param {number} limit - Maximum number of users to return\n   * @param {number} page - Page number for pagination\n   * @returns {object[]} Array of user objects\n   * @throws {Error} When user is not authenticated\n   * @memberof UsersService\n   * @example\n   * const users = usersService.getUsers({}, 10, 1);\n   * // Returns: [{ firstName: \"John\", lastName: \"Doe\", email: \"johndoe@fo.com\" }, ...]\n   */\n  public getUsers(\n    getUserParamsDto: GetUserParamsDto,\n    limit: number,\n    page: number,\n  ) {\n    console.log('GetUserParamsDto:', getUserParamsDto);\n    console.log('Limit:', limit);\n    console.log('Page:', page);\n\n    if (this.authService.isAuth()) {\n      return [\n        {\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'johndoe@fo.com',\n        },\n        {\n          firstName: 'Jane',\n          lastName: 'Doe',\n          email: 'janeDoe@gp.com',\n        },\n      ];\n    }\n    throw new Error('Unauthorized access');\n  }\n\n  /**\n   * Retrieves a specific user by their unique identifier.\n   * \n   * This method fetches user information based on the provided user ID\n   * and returns detailed user data including personal information and\n   * contact details.\n   * \n   * @param {GetUserParamsDto} getUserParamsDto - Parameters containing the user ID\n   * @returns {object} User object with detailed information\n   * @memberof UsersService\n   * @example\n   * const user = usersService.getUserById({ id: 1231 });\n   * // Returns: { id: 1231, firstName: \"John\", lastName: \"Doe\", email: \"john@hao.com\" }\n   */\n  public getUserById(getUserParamsDto: GetUserParamsDto) {\n    const { id } = getUserParamsDto;\n    console.log('Get user by ID:', id);\n    return {\n      id: 1231,\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john@hao.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-option.dto.ts\n            \n            class\n            CreatePostMetaOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/posts/services/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-params.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            postTypes   (src/.../post-types.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n            \n        \n\n    src/posts/enums/post-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function that initializes and configures the NestJS application.\nThis function serves as the entry point for the application, setting up:\n\nGlobal validation pipes for request validation\nSwagger/OpenAPI documentation\nServer configuration and startup\n\nThe application includes comprehensive validation, API documentation,\nand proper error handling for production-ready deployment.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
